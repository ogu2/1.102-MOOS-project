<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="center">
  <p><img src="moose7.gif" width="105" height="84"> </p>
  <p><font size="+1" face="Arial, Helvetica, sans-serif">MOOS</font></p>
</div>
</body>
</html>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.html"><span>Classes</span></a></li>
    <li><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>CMOOSCommServer Class Reference</h1><!-- doxytag: class="CMOOSCommServer" --><!-- doxytag: inherits="CMOOSCommObject" --><code>#include &lt;<a class="el" href="MOOSCommServer_8h-source.html">MOOSCommServer.h</a>&gt;</code>
<p>
<p>Inheritance diagram for CMOOSCommServer:
<p><center><img src="classCMOOSCommServer.png" usemap="#CMOOSCommServer_map" border="0" alt=""></center>
<map name="CMOOSCommServer_map">
<area href="classCMOOSCommObject.html" alt="CMOOSCommObject" shape="rect" coords="0,0,133,24">
</map>
<a href="classCMOOSCommServer-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="7304a47cc2520ce9b70aeeb4b27d5d31"></a><!-- doxytag: member="CMOOSCommServer::SOCKETLIST" ref="7304a47cc2520ce9b70aeeb4b27d5d31" args="" -->
typedef std::list&lt; XPCTcpSocket * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><b>SOCKETLIST</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="563911e58921e4bd5b09c81802e48602"></a><!-- doxytag: member="CMOOSCommServer::SOCKETFD_2_CLIENT_NAME_MAP" ref="563911e58921e4bd5b09c81802e48602" args="" -->
typedef std::map&lt; int, std::string &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><b>SOCKETFD_2_CLIENT_NAME_MAP</b></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="5799532fb643d9516d6f8698e7f9dc59"></a><!-- doxytag: member="CMOOSCommServer::STRING_LIST" ref="5799532fb643d9516d6f8698e7f9dc59" args="" -->
typedef std::list&lt; std::string &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><b>STRING_LIST</b></td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="3b8f3969c6dc300e705296170d271738"></a><!-- doxytag: member="CMOOSCommServer::GetClientNames" ref="3b8f3969c6dc300e705296170d271738" args="(STRING_LIST &amp;sList)" -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><b>GetClientNames</b> (STRING_LIST &amp;sList)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#e8207bedf50af7c626d5c87280555578">SetOnRxCallBack</a> (bool(*pfn)(const std::string &amp;sClient, MOOSMSG_LIST &amp;MsgListRx, MOOSMSG_LIST &amp;MsgListTx, void *pParam), void *pParam)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#9ba76c5b1087507781af877e70c9df19">SetOnDisconnectCallBack</a> (bool(*pfn)(std::string &amp;sClient, void *pParam), void *pParam)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#64c26ec3e8e48596630454fe1e0792f9">ListenLoop</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#f2c827a797ff29434c3ac6365031c538">ServerLoop</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#e839c9017eeb779912aa356f5e648cc4">TimerLoop</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#2a96ed69e3690ffba11be1e5d7ce0072">Run</a> (long lPort, const std::string &amp;sCommunityName)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="823b58bde189fbce022e08b0e5c35e68"></a><!-- doxytag: member="CMOOSCommServer::CMOOSCommServer" ref="823b58bde189fbce022e08b0e5c35e68" args="()" -->
&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#823b58bde189fbce022e08b0e5c35e68">CMOOSCommServer</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">default constructor <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="613ab80258d342250e03320331297ad5"></a><!-- doxytag: member="CMOOSCommServer::~CMOOSCommServer" ref="613ab80258d342250e03320331297ad5" args="()" -->
virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#613ab80258d342250e03320331297ad5">~CMOOSCommServer</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">default destructor <br></td></tr>
<tr><td colspan="2"><br><h2>Protected Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef pthread_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#37e64a88985f1d9cff0b33829039c36a">THREAD_ID</a></td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#71588c753d4c871fa5204f94c2c3e534">GetMaxSocketFD</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#2591eaf93650600c266d020470c2f1a1">DoBanner</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#d8e3858e21bc371cab1249ef39fb53d0">GetClientName</a> (XPCTcpSocket *pSocket)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#ec0375d3301008d79818cde6e284f33e">PoisonClient</a> (XPCTcpSocket *pSocket, char *sReason)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#e5d9ee2828a3297b88bec36c6451c75c">HandShake</a> (XPCTcpSocket *pNewSocket)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#9733df09921d3ee73ef47be484dc9486">IsUniqueName</a> (std::string &amp;sClientName)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="9457ecc50b88b7337280d2480c4e840b"></a><!-- doxytag: member="CMOOSCommServer::OnClientDisconnect" ref="9457ecc50b88b7337280d2480c4e840b" args="()" -->
virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#9457ecc50b88b7337280d2480c4e840b">OnClientDisconnect</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">called when a client disconnects or and error occurs <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0214a4253e1020718fd3bf49ab1106d7"></a><!-- doxytag: member="CMOOSCommServer::OnAbsentClient" ref="0214a4253e1020718fd3bf49ab1106d7" args="(XPCTcpSocket *pClient)" -->
virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#0214a4253e1020718fd3bf49ab1106d7">OnAbsentClient</a> (XPCTcpSocket *pClient)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">called when a client goes quiet... <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#8f7ecb901640dbf480ac5da30e429e0e">OnNewClient</a> (XPCTcpSocket *pNewClient, char *sName)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#b8b6a7346bbb0466e34ba7000fa9db49">ProcessClient</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="0128a6cd63a3122a47a25e1ecf15a6e1"></a><!-- doxytag: member="CMOOSCommServer::StartThreads" ref="0128a6cd63a3122a47a25e1ecf15a6e1" args="()" -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#0128a6cd63a3122a47a25e1ecf15a6e1">StartThreads</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">called from init to start teh listen and server threads up <br></td></tr>
<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">CMOOSLock&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#5718c59313363b3df9436977d30a5cd4">m_SocketListLock</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="3c706a720666d6a36e2e86df1bc516d7"></a><!-- doxytag: member="CMOOSCommServer::m_nTotalActions" ref="3c706a720666d6a36e2e86df1bc516d7" args="" -->
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#3c706a720666d6a36e2e86df1bc516d7">m_nTotalActions</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">internal count of the number of calls processed <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="f39d0b9a5ed8ad6b6f51f4364419c436"></a><!-- doxytag: member="CMOOSCommServer::m_nListenThreadID" ref="f39d0b9a5ed8ad6b6f51f4364419c436" args="" -->
<a class="el" href="classCMOOSCommServer.html#37e64a88985f1d9cff0b33829039c36a">THREAD_ID</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#f39d0b9a5ed8ad6b6f51f4364419c436">m_nListenThreadID</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">ID of Listen Thread. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="b11bbe5c58bfb08eb1457ce823139033"></a><!-- doxytag: member="CMOOSCommServer::m_nServerThreadID" ref="b11bbe5c58bfb08eb1457ce823139033" args="" -->
<a class="el" href="classCMOOSCommServer.html#37e64a88985f1d9cff0b33829039c36a">THREAD_ID</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#b11bbe5c58bfb08eb1457ce823139033">m_nServerThreadID</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">ID of Server Thread. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="870c5a4f067dde8c3ced44d3a0f3f333"></a><!-- doxytag: member="CMOOSCommServer::m_nTimerThreadID" ref="870c5a4f067dde8c3ced44d3a0f3f333" args="" -->
<a class="el" href="classCMOOSCommServer.html#37e64a88985f1d9cff0b33829039c36a">THREAD_ID</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#870c5a4f067dde8c3ced44d3a0f3f333">m_nTimerThreadID</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">ID of timer Thread. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#f3320221d2f4048a908417a42b901fb7">m_pfnRxCallBack</a> )(const std::string &amp;sClient, MOOSMSG_LIST &amp;MsgListRx, MOOSMSG_LIST &amp;MsgListTx, void *pCaller)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#d8e50001daf1d6e098b7a7f726384992">m_pRxCallBackParam</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool(*&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#e0ed112a03892fbd3ff3a81abff39b08">m_pfnDisconnectCallBack</a> )(std::string &amp;sClient, void *pParam)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#00d3227f812a9ed8221c5733628b91f3">m_pDisconnectCallBackParam</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">XPCTcpSocket *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#f1a92dfaf5d416d00f498fa786ecedc3">m_pListenSocket</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">XPCTcpSocket *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#afdaa007c09247214e3b0a73ada1d683">m_pFocusSocket</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">SOCKETLIST&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#d4e15e0e9ce44f8e83a4e8b0ae89e2da">m_ClientSocketList</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">SOCKETFD_2_CLIENT_NAME_MAP&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#d285180722eaaf36d7ff5536e3438443">m_Socket2ClientMap</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="32b159ef9bf1208e3eaf6e18639cf8bd"></a><!-- doxytag: member="CMOOSCommServer::m_lListenPort" ref="32b159ef9bf1208e3eaf6e18639cf8bd" args="" -->
long&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#32b159ef9bf1208e3eaf6e18639cf8bd">m_lListenPort</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">port listen socket is bound to <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cfddde7d97eb8461097865e90640bc94"></a><!-- doxytag: member="CMOOSCommServer::m_bQuit" ref="cfddde7d97eb8461097865e90640bc94" args="" -->
bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#cfddde7d97eb8461097865e90640bc94">m_bQuit</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">threads continue while this flag is false <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="cf8ae68d3c0820fcc0bd37a137d3ad5c"></a><!-- doxytag: member="CMOOSCommServer::m_nMaxSocketFD" ref="cf8ae68d3c0820fcc0bd37a137d3ad5c" args="" -->
int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#cf8ae68d3c0820fcc0bd37a137d3ad5c">m_nMaxSocketFD</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">largest FD of all connected sockets <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="866c7a5f8aec18cb19d722c59d943302"></a><!-- doxytag: member="CMOOSCommServer::m_sCommunityName" ref="866c7a5f8aec18cb19d722c59d943302" args="" -->
std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCMOOSCommServer.html#866c7a5f8aec18cb19d722c59d943302">m_sCommunityName</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">name of community being served <br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This class is the MOOS Comms Server. It lies at the heart of the communications architecture and typically is of no interest to the component developer. It maintains a list of all the connected clients and their names. It simultaneously listens on all sockets for calling clients and then calls a user supplied call back to handle the request. This class is only used by the CMOOSDB application 
<p>
<hr><h2>Member Typedef Documentation</h2>
<a class="anchor" name="37e64a88985f1d9cff0b33829039c36a"></a><!-- doxytag: member="CMOOSCommServer::THREAD_ID" ref="37e64a88985f1d9cff0b33829039c36a" args="" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">typedef pthread_t <a class="el" href="classCMOOSCommServer.html#37e64a88985f1d9cff0b33829039c36a">CMOOSCommServer::THREAD_ID</a><code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Win32 handle to Server thread <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="classCMOOSCommServer.html#f2c827a797ff29434c3ac6365031c538">ServerLoop</a> </dd></dl>
    </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="2591eaf93650600c266d020470c2f1a1"></a><!-- doxytag: member="CMOOSCommServer::DoBanner" ref="2591eaf93650600c266d020470c2f1a1" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void CMOOSCommServer::DoBanner           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
prints class information banner to stdout     </td>
  </tr>
</table>
<a class="anchor" name="d8e3858e21bc371cab1249ef39fb53d0"></a><!-- doxytag: member="CMOOSCommServer::GetClientName" ref="d8e3858e21bc371cab1249ef39fb53d0" args="(XPCTcpSocket *pSocket)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">string CMOOSCommServer::GetClientName           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">XPCTcpSocket *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>pSocket</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Get the name of the client on the remote end of pSocket     </td>
  </tr>
</table>
<a class="anchor" name="71588c753d4c871fa5204f94c2c3e534"></a><!-- doxytag: member="CMOOSCommServer::GetMaxSocketFD" ref="71588c753d4c871fa5204f94c2c3e534" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int CMOOSCommServer::GetMaxSocketFD           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
figures out what the largest socket FD of all connected sockets. (needed by select)     </td>
  </tr>
</table>
<a class="anchor" name="e5d9ee2828a3297b88bec36c6451c75c"></a><!-- doxytag: member="CMOOSCommServer::HandShake" ref="e5d9ee2828a3297b88bec36c6451c75c" args="(XPCTcpSocket *pNewSocket)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool CMOOSCommServer::HandShake           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">XPCTcpSocket *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>pNewSocket</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Perform handshaling with client just after a connection has been accepted     </td>
  </tr>
</table>
<a class="anchor" name="9733df09921d3ee73ef47be484dc9486"></a><!-- doxytag: member="CMOOSCommServer::IsUniqueName" ref="9733df09921d3ee73ef47be484dc9486" args="(std::string &amp;sClientName)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool CMOOSCommServer::IsUniqueName           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">std::string &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>sClientName</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
returns true if a server has no connection to the named client <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sClientName</em>&nbsp;</td><td>reference to client name std::string </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="64c26ec3e8e48596630454fe1e0792f9"></a><!-- doxytag: member="CMOOSCommServer::ListenLoop" ref="64c26ec3e8e48596630454fe1e0792f9" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool CMOOSCommServer::ListenLoop           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is the listen loop called from one of the two server threads. It is responsible for accepting a coonection and creating a new client socket.     </td>
  </tr>
</table>
<a class="anchor" name="8f7ecb901640dbf480ac5da30e429e0e"></a><!-- doxytag: member="CMOOSCommServer::OnNewClient" ref="8f7ecb901640dbf480ac5da30e429e0e" args="(XPCTcpSocket *pNewClient, char *sName)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool CMOOSCommServer::OnNewClient           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">XPCTcpSocket *&nbsp;</td>
          <td class="mdname" nowrap> <em>pNewClient</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>char *&nbsp;</td>
          <td class="mdname" nowrap> <em>sName</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [protected, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Called when a new client connects. Performs handshaking and adds new socket to m_ClientSocketList <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pNewClient</em>&nbsp;</td><td>pointer to teh new socket created in ListenLoop; </td></tr>
  </table>
</dl>
<dl compact><dt><b>See also:</b></dt><dd><a class="el" href="classCMOOSCommServer.html#64c26ec3e8e48596630454fe1e0792f9">ListenLoop</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ec0375d3301008d79818cde6e284f33e"></a><!-- doxytag: member="CMOOSCommServer::PoisonClient" ref="ec0375d3301008d79818cde6e284f33e" args="(XPCTcpSocket *pSocket, char *sReason)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void CMOOSCommServer::PoisonClient           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">XPCTcpSocket *&nbsp;</td>
          <td class="mdname" nowrap> <em>pSocket</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>char *&nbsp;</td>
          <td class="mdname" nowrap> <em>sReason</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Send a Poisoned mesasge to the client on the end of pSocket. This may cause teh client comms thrad to die     </td>
  </tr>
</table>
<a class="anchor" name="b8b6a7346bbb0466e34ba7000fa9db49"></a><!-- doxytag: member="CMOOSCommServer::ProcessClient" ref="b8b6a7346bbb0466e34ba7000fa9db49" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool CMOOSCommServer::ProcessClient           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
called from Server loop this function handles all the processing for the current client call. It inturn invokes the user supplied callback function     </td>
  </tr>
</table>
<a class="anchor" name="2a96ed69e3690ffba11be1e5d7ce0072"></a><!-- doxytag: member="CMOOSCommServer::Run" ref="2a96ed69e3690ffba11be1e5d7ce0072" args="(long lPort, const std::string &amp;sCommunityName)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool CMOOSCommServer::Run           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">long&nbsp;</td>
          <td class="mdname" nowrap> <em>lPort</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const std::string &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>sCommunityName</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initialise the server. This is a non blocking call and launches the MOOS Comms server threads. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>lPort</em>&nbsp;</td><td>port number to listen on </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="f2c827a797ff29434c3ac6365031c538"></a><!-- doxytag: member="CMOOSCommServer::ServerLoop" ref="f2c827a797ff29434c3ac6365031c538" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool CMOOSCommServer::ServerLoop           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is the server loop called from one of the two server threads. It listens to all presently connected sockets and when a call is received invokes thse user supplied callback     </td>
  </tr>
</table>
<a class="anchor" name="9ba76c5b1087507781af877e70c9df19"></a><!-- doxytag: member="CMOOSCommServer::SetOnDisconnectCallBack" ref="9ba76c5b1087507781af877e70c9df19" args="(bool(*pfn)(std::string &amp;sClient, void *pParam), void *pParam)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void CMOOSCommServer::SetOnDisconnectCallBack           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">bool(*)(std::string &amp;sClient, void *pParam)&nbsp;</td>
          <td class="mdname" nowrap> <em>pfn</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>void *&nbsp;</td>
          <td class="mdname" nowrap> <em>pParam</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Set the disconnect message call back handler. The supplied call back must be of the form static bool MyCallBack(std::string  &amp; sClient,, void * pParam). <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sClient</em>&nbsp;</td><td>contains the incoming messages. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>TxLst</em>&nbsp;</td><td>passed to the handler as a recepticle for all the message that should be sent back to the client in response to teh incoming messages. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pParam</em>&nbsp;</td><td>user suplied parameter to be passed to callback function </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="e8207bedf50af7c626d5c87280555578"></a><!-- doxytag: member="CMOOSCommServer::SetOnRxCallBack" ref="e8207bedf50af7c626d5c87280555578" args="(bool(*pfn)(const std::string &amp;sClient, MOOSMSG_LIST &amp;MsgListRx, MOOSMSG_LIST &amp;MsgListTx, void *pParam), void *pParam)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void CMOOSCommServer::SetOnRxCallBack           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">bool(*)(const std::string &amp;sClient, MOOSMSG_LIST &amp;MsgListRx, MOOSMSG_LIST &amp;MsgListTx, void *pParam)&nbsp;</td>
          <td class="mdname" nowrap> <em>pfn</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>void *&nbsp;</td>
          <td class="mdname" nowrap> <em>pParam</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Set the recieve message call back handler. The callback will be called whenever a client sends one or more messages to teh server. The supplied call back must be of the form static bool MyCallBack(MOOSMSG_LIST &amp; RxLst,MOOSMSG_LIST &amp; TxLst, void * pParam). <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sClient</em>&nbsp;</td><td>Name of client at the end of the socket sending this Pkt </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>RxLst</em>&nbsp;</td><td>contains the incoming messages. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>TxLst</em>&nbsp;</td><td>passed to the handler as a recepticle for all the message that should be sent back to the client in response to teh incoming messages. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pParam</em>&nbsp;</td><td>user suplied parameter to be passed to callback function </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="e839c9017eeb779912aa356f5e648cc4"></a><!-- doxytag: member="CMOOSCommServer::TimerLoop" ref="e839c9017eeb779912aa356f5e648cc4" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool CMOOSCommServer::TimerLoop           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function is the timer loop called from one of the three server threads. It makes sure all clients speak occasionally     </td>
  </tr>
</table>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="d4e15e0e9ce44f8e83a4e8b0ae89e2da"></a><!-- doxytag: member="CMOOSCommServer::m_ClientSocketList" ref="d4e15e0e9ce44f8e83a4e8b0ae89e2da" args="" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">SOCKETLIST <a class="el" href="classCMOOSCommServer.html#d4e15e0e9ce44f8e83a4e8b0ae89e2da">CMOOSCommServer::m_ClientSocketList</a><code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
list of all currently connected sockets     </td>
  </tr>
</table>
<a class="anchor" name="00d3227f812a9ed8221c5733628b91f3"></a><!-- doxytag: member="CMOOSCommServer::m_pDisconnectCallBackParam" ref="00d3227f812a9ed8221c5733628b91f3" args="" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void* <a class="el" href="classCMOOSCommServer.html#00d3227f812a9ed8221c5733628b91f3">CMOOSCommServer::m_pDisconnectCallBackParam</a><code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
place holder for teh address of the object passed back to the user during a Disconnect callback <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="classCMOOSCommServer.html#9ba76c5b1087507781af877e70c9df19">SetOnDisconnectCallBack</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="e0ed112a03892fbd3ff3a81abff39b08"></a><!-- doxytag: member="CMOOSCommServer::m_pfnDisconnectCallBack" ref="e0ed112a03892fbd3ff3a81abff39b08" args=")(std::string &amp;sClient, void *pParam)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool(* <a class="el" href="classCMOOSCommServer.html#e0ed112a03892fbd3ff3a81abff39b08">CMOOSCommServer::m_pfnDisconnectCallBack</a>)(std::string &amp;sClient, void *pParam)<code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
user supplied OnDisconnect callback <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="classCMOOSCommServer.html#9ba76c5b1087507781af877e70c9df19">SetOnDisconnectCallBack</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="f3320221d2f4048a908417a42b901fb7"></a><!-- doxytag: member="CMOOSCommServer::m_pfnRxCallBack" ref="f3320221d2f4048a908417a42b901fb7" args=")(const std::string &amp;sClient, MOOSMSG_LIST &amp;MsgListRx, MOOSMSG_LIST &amp;MsgListTx, void *pCaller)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool(* <a class="el" href="classCMOOSCommServer.html#f3320221d2f4048a908417a42b901fb7">CMOOSCommServer::m_pfnRxCallBack</a>)(const std::string &amp;sClient, MOOSMSG_LIST &amp;MsgListRx, MOOSMSG_LIST &amp;MsgListTx, void *pCaller)<code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
user supplied OnRx callback <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="classCMOOSCommServer.html#e8207bedf50af7c626d5c87280555578">SetOnRxCallBack</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="afdaa007c09247214e3b0a73ada1d683"></a><!-- doxytag: member="CMOOSCommServer::m_pFocusSocket" ref="afdaa007c09247214e3b0a73ada1d683" args="" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">XPCTcpSocket* <a class="el" href="classCMOOSCommServer.html#afdaa007c09247214e3b0a73ada1d683">CMOOSCommServer::m_pFocusSocket</a><code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
pointer to the socket which server is currently processing call from     </td>
  </tr>
</table>
<a class="anchor" name="f1a92dfaf5d416d00f498fa786ecedc3"></a><!-- doxytag: member="CMOOSCommServer::m_pListenSocket" ref="f1a92dfaf5d416d00f498fa786ecedc3" args="" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">XPCTcpSocket* <a class="el" href="classCMOOSCommServer.html#f1a92dfaf5d416d00f498fa786ecedc3">CMOOSCommServer::m_pListenSocket</a><code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Listen socket (bound to port address supplied in constructor)     </td>
  </tr>
</table>
<a class="anchor" name="d8e50001daf1d6e098b7a7f726384992"></a><!-- doxytag: member="CMOOSCommServer::m_pRxCallBackParam" ref="d8e50001daf1d6e098b7a7f726384992" args="" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void* <a class="el" href="classCMOOSCommServer.html#d8e50001daf1d6e098b7a7f726384992">CMOOSCommServer::m_pRxCallBackParam</a><code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
place holder for teh address of the object passed back to the user during an Rx callback <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="classCMOOSCommServer.html#e8207bedf50af7c626d5c87280555578">SetOnRxCallBack</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="d285180722eaaf36d7ff5536e3438443"></a><!-- doxytag: member="CMOOSCommServer::m_Socket2ClientMap" ref="d285180722eaaf36d7ff5536e3438443" args="" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">SOCKETFD_2_CLIENT_NAME_MAP <a class="el" href="classCMOOSCommServer.html#d285180722eaaf36d7ff5536e3438443">CMOOSCommServer::m_Socket2ClientMap</a><code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
map of socket file descriptors to the std::string name of the client process at teh other end     </td>
  </tr>
</table>
<a class="anchor" name="5718c59313363b3df9436977d30a5cd4"></a><!-- doxytag: member="CMOOSCommServer::m_SocketListLock" ref="5718c59313363b3df9436977d30a5cd4" args="" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">CMOOSLock <a class="el" href="classCMOOSCommServer.html#5718c59313363b3df9436977d30a5cd4">CMOOSCommServer::m_SocketListLock</a><code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
a simple mutex to guard access to m_ClientSocketList <dl compact><dt><b>See also:</b></dt><dd><a class="el" href="classCMOOSCommServer.html#d4e15e0e9ce44f8e83a4e8b0ae89e2da">m_ClientSocketList</a> </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following files:<ul>
<li>/home/pnewman/code/MOOS/trunk/Core/MOOSLIB/<a class="el" href="MOOSCommServer_8h-source.html">MOOSCommServer.h</a><li>/home/pnewman/code/MOOS/trunk/Core/MOOSLIB/MOOSCommServer.cpp</ul>
<hr size="1"><address style="align: right;"><small>Generated on Fri Sep 28 20:14:20 2007 for MOOSLIB by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
