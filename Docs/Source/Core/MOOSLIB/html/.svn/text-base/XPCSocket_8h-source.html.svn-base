<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="center">
  <p><img src="moose7.gif" width="105" height="84"> </p>
  <p><font size="+1" face="Arial, Helvetica, sans-serif">MOOS</font></p>
</div>
</body>
</html>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<h1>/home/pnewman/code/MOOS/trunk/Core/MOOSLIB/XPCSocket.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">//   MOOS - Mission Oriented Operating Suite </span>
<a name="l00004"></a>00004 <span class="comment">//  </span>
<a name="l00005"></a>00005 <span class="comment">//   A suit of Applications and Libraries for Mobile Robotics Research </span>
<a name="l00006"></a>00006 <span class="comment">//   Copyright (C) 2001-2005 Massachusetts Institute of Technology and </span>
<a name="l00007"></a>00007 <span class="comment">//   Oxford University. </span>
<a name="l00008"></a>00008 <span class="comment">//    </span>
<a name="l00009"></a>00009 <span class="comment">//   This software was written by Paul Newman at MIT 2001-2002 and Oxford </span>
<a name="l00010"></a>00010 <span class="comment">//   University 2003-2005. email: pnewman@robots.ox.ac.uk. </span>
<a name="l00011"></a>00011 <span class="comment">//      </span>
<a name="l00012"></a>00012 <span class="comment">//   This file is part of a  MOOS CORE Component. </span>
<a name="l00013"></a>00013 <span class="comment">//        </span>
<a name="l00014"></a>00014 <span class="comment">//   This program is free software; you can redistribute it and/or </span>
<a name="l00015"></a>00015 <span class="comment">//   modify it under the terms of the GNU General Public License as </span>
<a name="l00016"></a>00016 <span class="comment">//   published by the Free Software Foundation; either version 2 of the </span>
<a name="l00017"></a>00017 <span class="comment">//   License, or (at your option) any later version. </span>
<a name="l00018"></a>00018 <span class="comment">//          </span>
<a name="l00019"></a>00019 <span class="comment">//   This program is distributed in the hope that it will be useful, </span>
<a name="l00020"></a>00020 <span class="comment">//   but WITHOUT ANY WARRANTY; without even the implied warranty of </span>
<a name="l00021"></a>00021 <span class="comment">//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU </span>
<a name="l00022"></a>00022 <span class="comment">//   General Public License for more details. </span>
<a name="l00023"></a>00023 <span class="comment">//            </span>
<a name="l00024"></a>00024 <span class="comment">//   You should have received a copy of the GNU General Public License </span>
<a name="l00025"></a>00025 <span class="comment">//   along with this program; if not, write to the Free Software </span>
<a name="l00026"></a>00026 <span class="comment">//   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA </span>
<a name="l00027"></a>00027 <span class="comment">//   02111-1307, USA. </span>
<a name="l00028"></a>00028 <span class="comment">//</span>
<a name="l00029"></a>00029 <span class="comment">//   The XPC classes in MOOS are modified versions of the source provided </span>
<a name="l00030"></a>00030 <span class="comment">//   in "Making UNIX and Windows NT Talk" by Mark Nadelson and Thomas Haga </span>
<a name="l00031"></a>00031 <span class="comment">//</span>
<a name="l00033"></a>00033 <span class="comment"></span><span class="preprocessor">#ifndef _XPCSocket</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span><span class="preprocessor">#define _XPCSocket</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 <span class="preprocessor">#include "XPCGetProtocol.h"</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include "XPCGetHostInfo.h"</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#ifdef UNIX</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">    #include &lt;sys/socket.h&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">    #include &lt;unistd.h&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">    #include &lt;fcntl.h&gt;</span>
<a name="l00045"></a>00045 <span class="preprocessor">    #include &lt;errno.h&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">    #include &lt;iostream&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">    #include &lt;sys/types.h&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">    #ifdef PLATFORM_DARWIN</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">        #include &lt;sys/ioctl.h&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">    #endif</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">    #ifdef PLATFORM_LINUX</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">        #include &lt;stropts.h&gt;</span>
<a name="l00053"></a>00053         <span class="comment">//    #include &lt;sys/filio.h&gt;</span>
<a name="l00054"></a>00054 <span class="preprocessor">        #define FIONBIO 0x5421</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span><span class="preprocessor">#elif _WIN32</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span><span class="preprocessor">    #include &lt;winsock2.h&gt;</span>
<a name="l00058"></a>00058 <span class="preprocessor">    #include "windows.h"</span>
<a name="l00059"></a>00059 <span class="preprocessor">    #include "winbase.h"</span>
<a name="l00060"></a>00060 <span class="preprocessor">    #include "winnt.h"</span>
<a name="l00061"></a>00061     <span class="keyword">typedef</span> <span class="keywordtype">int</span> socklen_t;
<a name="l00062"></a>00062 <span class="preprocessor">#else</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="preprocessor">    #error "Looks like the build scripts didn't set the platform type"</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span>
<a name="l00066"></a>00066 <span class="keyword">class </span>XPCSocket
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068 <span class="keyword">protected</span>:
<a name="l00069"></a>00069     <span class="keywordtype">int</span> iPort;        <span class="comment">// Socket port number    </span>
<a name="l00070"></a>00070     <span class="keywordtype">int</span> iSocket;        <span class="comment">// Socket file descriptor</span>
<a name="l00071"></a>00071     <span class="keywordtype">int</span> iBlocking;        <span class="comment">// Blocking flag</span>
<a name="l00072"></a>00072     <span class="keywordtype">char</span> cBind;        <span class="comment">// Binding flag</span>
<a name="l00073"></a>00073     <span class="keywordtype">double</span>  m_dfLastRead;
<a name="l00074"></a>00074     <span class="keyword">struct </span>sockaddr_in clientAddress;    <span class="comment">// Address of the client that sent data</span>
<a name="l00075"></a>00075 <span class="keyword">public</span>:
<a name="l00076"></a>00076     <span class="keywordtype">void</span> vSetRecieveTimeOut(<span class="keywordtype">int</span> nTimeOut);
<a name="l00077"></a>00077     <span class="keywordtype">void</span> SetReadTime(<span class="keywordtype">double</span> dfTime){m_dfLastRead = dfTime;};
<a name="l00078"></a>00078     <span class="keywordtype">double</span> GetReadTime(){<span class="keywordflow">return</span> m_dfLastRead;};
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     <span class="comment">//returns integer number of last socket error</span>
<a name="l00081"></a>00081     <span class="keywordtype">int</span> iGetLastError();
<a name="l00082"></a>00082     <span class="comment">// Constructor.  Creates a socket given a protocol (UDP / TCP) and a port number</span>
<a name="l00083"></a>00083     XPCSocket(<span class="keywordtype">char</span> *_sProtocol, <span class="keywordtype">int</span> _iPort);
<a name="l00084"></a>00084 
<a name="l00085"></a>00085     <span class="comment">// Constructor.  Stores a socket file descriptor</span>
<a name="l00086"></a>00086     XPCSocket(<span class="keywordtype">int</span> _iSocket) : iSocket(_iSocket) { };
<a name="l00087"></a>00087 
<a name="l00088"></a>00088     <span class="comment">// Destructor.  Closes the socket</span>
<a name="l00089"></a>00089     <span class="keyword">virtual</span> ~XPCSocket()
<a name="l00090"></a>00090     {
<a name="l00091"></a>00091         vCloseSocket();
<a name="l00092"></a>00092     }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094     <span class="comment">// Closes the socket</span>
<a name="l00095"></a>00095     <span class="keywordtype">void</span> vCloseSocket() 
<a name="l00096"></a>00096     { 
<a name="l00097"></a>00097 <span class="preprocessor">        #ifdef    WINDOWS_NT</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span>            closesocket(iSocket);
<a name="l00099"></a>00099 <span class="preprocessor">        #else</span>
<a name="l00100"></a>00100 <span class="preprocessor"></span>            close(iSocket);
<a name="l00101"></a>00101 <span class="preprocessor">        #endif</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span>    }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104     <span class="comment">// The following member functions sets socket options on and off</span>
<a name="l00105"></a>00105     <span class="keywordtype">void</span> vSetDebug(<span class="keywordtype">int</span> _iToggle);
<a name="l00106"></a>00106     <span class="keywordtype">void</span> vSetBroadcast(<span class="keywordtype">int</span> _iToggle);
<a name="l00107"></a>00107     <span class="keywordtype">void</span> vSetReuseAddr(<span class="keywordtype">int</span> _iToggle);
<a name="l00108"></a>00108     <span class="keywordtype">void</span> vSetKeepAlive(<span class="keywordtype">int</span> _iToggle);
<a name="l00109"></a>00109     <span class="keywordtype">void</span> vSetLinger(<span class="keyword">struct</span> linger _lingerOption);
<a name="l00110"></a>00110     <span class="keywordtype">void</span> vSetSocketBlocking(<span class="keywordtype">int</span> _iToggle);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="comment">// Sets the size of the send and receive buffer</span>
<a name="l00113"></a>00113     <span class="keywordtype">void</span> vSetSendBuf(<span class="keywordtype">int</span> _iSendBufSize);
<a name="l00114"></a>00114     <span class="keywordtype">void</span> vSetRecieveBuf(<span class="keywordtype">int</span> _iRecieveBufSize);
<a name="l00115"></a>00115 
<a name="l00116"></a>00116     <span class="comment">// The following member functions retrieve socket option settings</span>
<a name="l00117"></a>00117     <span class="keywordtype">int</span> iGetDebug();
<a name="l00118"></a>00118     <span class="keywordtype">int</span>  iGetBroadcast();
<a name="l00119"></a>00119     <span class="keywordtype">int</span>  iGetReuseAddr();
<a name="l00120"></a>00120     <span class="keywordtype">int</span>  iGetKeepAlive();
<a name="l00121"></a>00121     <span class="keywordtype">void</span> vGetLinger(<span class="keyword">struct</span> linger &amp;_lingerOption);
<a name="l00122"></a>00122     <span class="keywordtype">int</span>  iGetSendBuf();
<a name="l00123"></a>00123     <span class="keywordtype">int</span>  iGetRecieveBuf();
<a name="l00124"></a>00124     <span class="keywordtype">int</span>  iGetSocketBlocking() { <span class="keywordflow">return</span> iBlocking; }
<a name="l00125"></a>00125 
<a name="l00126"></a>00126     <span class="comment">// Returns the socket file descriptor</span>
<a name="l00127"></a>00127     <span class="keywordtype">int</span>  iGetSocketFd() { <span class="keywordflow">return</span> iSocket; }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129     <span class="comment">// Gets the system error</span>
<a name="l00130"></a>00130     <span class="keywordtype">char</span> *sGetError()
<a name="l00131"></a>00131     {
<a name="l00132"></a>00132 <span class="preprocessor">        #ifdef UNIX</span>
<a name="l00133"></a>00133 <span class="preprocessor"></span>            <span class="keywordflow">return</span> strerror(errno);
<a name="l00134"></a>00134 <span class="preprocessor">        #elif _WIN32</span>
<a name="l00135"></a>00135 <span class="preprocessor"></span>            <span class="keyword">static</span> <span class="keywordtype">char</span> buf[10];
<a name="l00136"></a>00136             sprintf(buf, <span class="stringliteral">"%d"</span>, WSAGetLastError());    
<a name="l00137"></a>00137             <span class="keywordflow">return</span> buf;
<a name="l00138"></a>00138 <span class="preprocessor">        #endif</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span>    }
<a name="l00140"></a>00140 };
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 <span class="preprocessor">#endif</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span>        
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Fri Sep 28 20:14:20 2007 for MOOSLIB by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
