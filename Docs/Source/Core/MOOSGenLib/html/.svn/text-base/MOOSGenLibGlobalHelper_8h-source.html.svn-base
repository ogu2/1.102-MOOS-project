<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="center">
  <p><img src="moose7.gif" width="105" height="84"> </p>
  <p><font size="+1" face="Arial, Helvetica, sans-serif">MOOS</font></p>
</div>
</body>
</html>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>/home/pnewman/code/MOOS/trunk/Core/MOOSGenLib/MOOSGenLibGlobalHelper.h</h1><a href="MOOSGenLibGlobalHelper_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">//   MOOS - Mission Oriented Operating Suite </span>
<a name="l00004"></a>00004 <span class="comment">//  </span>
<a name="l00005"></a>00005 <span class="comment">//   A suit of Applications and Libraries for Mobile Robotics Research </span>
<a name="l00006"></a>00006 <span class="comment">//   Copyright (C) 2001-2005 Massachusetts Institute of Technology and </span>
<a name="l00007"></a>00007 <span class="comment">//   Oxford University. </span>
<a name="l00008"></a>00008 <span class="comment">//    </span>
<a name="l00009"></a>00009 <span class="comment">//   This software was written by Paul Newman at MIT 2001-2002 and Oxford </span>
<a name="l00010"></a>00010 <span class="comment">//   University 2003-2005. email: pnewman@robots.ox.ac.uk. </span>
<a name="l00011"></a>00011 <span class="comment">//      </span>
<a name="l00012"></a>00012 <span class="comment">//   This file is part of a  MOOS Core Component. </span>
<a name="l00013"></a>00013 <span class="comment">//        </span>
<a name="l00014"></a>00014 <span class="comment">//   This program is free software; you can redistribute it and/or </span>
<a name="l00015"></a>00015 <span class="comment">//   modify it under the terms of the GNU General Public License as </span>
<a name="l00016"></a>00016 <span class="comment">//   published by the Free Software Foundation; either version 2 of the </span>
<a name="l00017"></a>00017 <span class="comment">//   License, or (at your option) any later version. </span>
<a name="l00018"></a>00018 <span class="comment">//          </span>
<a name="l00019"></a>00019 <span class="comment">//   This program is distributed in the hope that it will be useful, </span>
<a name="l00020"></a>00020 <span class="comment">//   but WITHOUT ANY WARRANTY; without even the implied warranty of </span>
<a name="l00021"></a>00021 <span class="comment">//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU </span>
<a name="l00022"></a>00022 <span class="comment">//   General Public License for more details. </span>
<a name="l00023"></a>00023 <span class="comment">//            </span>
<a name="l00024"></a>00024 <span class="comment">//   You should have received a copy of the GNU General Public License </span>
<a name="l00025"></a>00025 <span class="comment">//   along with this program; if not, write to the Free Software </span>
<a name="l00026"></a>00026 <span class="comment">//   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA </span>
<a name="l00027"></a>00027 <span class="comment">//   02111-1307, USA. </span>
<a name="l00028"></a>00028 <span class="comment">//</span>
<a name="l00030"></a>00030 <span class="comment"></span>
<a name="l00033"></a>00033 <span class="preprocessor">#ifndef MOOSGenLibGlobalHelperh</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span><span class="preprocessor">#define MOOSGenLibGlobalHelperh</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#ifndef PI</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">#define PI 3.141592653589</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="keyword">typedef</span> std::list&lt;std::string&gt; STRING_LIST ;
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">//following function finds token = value in a list of such strings</span>
<a name="l00054"></a>00054 <span class="keywordtype">bool</span> MOOSGetValueFromToken(STRING_LIST &amp; sParams,<span class="keyword">const</span> std::string &amp; sToken,std::string &amp; sVal);
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">//following two functions remove a value from a string containing comma seperated pairs of Token = Val....</span>
<a name="l00057"></a>00057 <span class="keywordtype">bool</span> MOOSValFromString(std::string &amp; sVal,<span class="keyword">const</span> std::string &amp; sStr,<span class="keyword">const</span> std::string &amp; sTk);
<a name="l00058"></a>00058 <span class="keywordtype">bool</span> MOOSValFromString(<span class="keywordtype">double</span>  &amp; dfVal,<span class="keyword">const</span> std::string &amp; sStr,<span class="keyword">const</span> std::string &amp; sTk);
<a name="l00059"></a>00059 <span class="keywordtype">bool</span> MOOSValFromString(<span class="keywordtype">int</span>  &amp; nVal,<span class="keyword">const</span> std::string &amp; sStr,<span class="keyword">const</span> std::string &amp; sTk);
<a name="l00060"></a>00060 <span class="keywordtype">bool</span> MOOSValFromString(<span class="keywordtype">bool</span>  &amp; bVal,<span class="keyword">const</span> std::string &amp; sStr,<span class="keyword">const</span> std::string &amp; sTk);
<a name="l00061"></a>00061 <span class="keywordtype">bool</span> MOOSValFromString(std::vector&lt;double&gt; &amp;dfValVec,<span class="keywordtype">int</span> &amp;nRows,<span class="keywordtype">int</span> &amp;nCols, <span class="keyword">const</span> std::string &amp; sStr, <span class="keyword">const</span> std::string &amp; sToken);
<a name="l00062"></a>00062 <span class="keywordtype">bool</span> MOOSVectorFromString(<span class="keyword">const</span> std::string &amp; sStr,std::vector&lt;double&gt; &amp; dfVecVal,<span class="keywordtype">int</span> &amp; nRows,<span class="keywordtype">int</span> &amp; nCols);
<a name="l00063"></a>00063 <span class="keywordtype">bool</span> MOOSVectorFromString(<span class="keyword">const</span> std::string &amp; sStr,std::vector&lt;unsigned int&gt; &amp; dfVecVal,<span class="keywordtype">int</span> &amp; nRows,<span class="keywordtype">int</span> &amp; nCols);
<a name="l00064"></a>00064 
<a name="l00066"></a>00066 std::string DoubleVector2String(<span class="keyword">const</span> std::vector&lt;double&gt; &amp; V);
<a name="l00067"></a>00067 
<a name="l00069"></a>00069 std::stringstream &amp; Write (std::stringstream &amp; os,<span class="keyword">const</span> std::vector&lt;double&gt; &amp; Vec); 
<a name="l00070"></a>00070 
<a name="l00072"></a>00072 std::stringstream &amp; Write (std::stringstream &amp; os,<span class="keyword">const</span> std::vector&lt;int&gt; &amp; Vec);
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 <span class="comment">//the ubiquitous chomp function</span>
<a name="l00075"></a>00075 std::string MOOSChomp(std::string &amp;sStr, <span class="keyword">const</span> std::string &amp;sTk=<span class="stringliteral">","</span>);
<a name="l00076"></a>00076 
<a name="l00078"></a>00078 <span class="keywordtype">void</span> <a class="code" href="MOOSGenLibGlobalHelper_8h.html#8b00203579c6dbbf663cb530f29ad635">MOOSRemoveChars</a>(std::string &amp; sStr,<span class="keyword">const</span> std::string &amp; sTok);
<a name="l00079"></a>00079 
<a name="l00081"></a>00081 <span class="keywordtype">void</span> <a class="code" href="MOOSGenLibGlobalHelper_8h.html#afdbe82b5b14ae86d284fcb246d161d6">MOOSToUpper</a>(std::string &amp;str);
<a name="l00082"></a>00082 
<a name="l00084"></a>00084 <span class="keywordtype">void</span> <a class="code" href="MOOSGenLibGlobalHelper_8h.html#ba95f8728f77221121b154dee1b844fe">MOOSTrimWhiteSpace</a>(std::string &amp; str);
<a name="l00085"></a>00085 
<a name="l00087"></a>00087 <span class="keywordtype">bool</span> <a class="code" href="MOOSGenLibGlobalHelper_8h.html#46bd68eab15b0d227f77ea97a2b1a2a5">MOOSIsNumeric</a>(std::string  str);
<a name="l00088"></a>00088 
<a name="l00090"></a>00090 <span class="keywordtype">bool</span> <a class="code" href="MOOSGenLibGlobalHelper_8h.html#a4ab003ef6526a09e974e26e0881895e">MOOSStrCmp</a>(std::string s1,std::string s2);
<a name="l00091"></a>00091 
<a name="l00093"></a>00093 
<a name="l00095"></a>00095 <span class="keywordtype">double</span> GetMOOSSkew();
<a name="l00096"></a>00096 <span class="keywordtype">void</span> SetMOOSSkew(<span class="keywordtype">double</span> dfSkew);
<a name="l00097"></a>00097 
<a name="l00099"></a>00099 <span class="keywordtype">double</span> GetMOOSSkew();
<a name="l00100"></a>00100 
<a name="l00102"></a>00102 <span class="keywordtype">void</span> MOOSPause(<span class="keywordtype">int</span> nMS);
<a name="l00103"></a>00103 
<a name="l00105"></a>00105 <span class="keywordtype">double</span> MOOSTime();
<a name="l00106"></a>00106 
<a name="l00108"></a>00108 <span class="keywordtype">double</span> HPMOOSTime();
<a name="l00109"></a>00109 
<a name="l00111"></a>00111 <span class="keywordtype">int</span>     MOOSGetch();
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00115"></a>00115 <span class="comment">//formatted printing</span>
<a name="l00117"></a>00117 <span class="comment"></span><span class="keywordtype">void</span> <a class="code" href="MOOSGenLibGlobalHelper_8h.html#433edb220f29b9962235c1c246e0d993">MOOSTrace</a>(std::string  Str);
<a name="l00118"></a>00118 
<a name="l00120"></a>00120 <span class="keywordtype">void</span> <a class="code" href="MOOSGenLibGlobalHelper_8h.html#433edb220f29b9962235c1c246e0d993">MOOSTrace</a>(<span class="keywordtype">char</span> *FmtStr,...);
<a name="l00121"></a>00121 
<a name="l00123"></a>00123 std::string MOOSFormat(<span class="keywordtype">char</span> * FmtStr,...);
<a name="l00124"></a>00124 
<a name="l00126"></a>00126 <span class="keywordtype">bool</span> MOOSFail(<span class="keywordtype">char</span> * FmtStr,...);
<a name="l00127"></a>00127 
<a name="l00129"></a>00129 std::string MOOSGetTimeStampString();
<a name="l00130"></a>00130 
<a name="l00132"></a>00132 std::string MOOSGetDate();
<a name="l00133"></a>00133 
<a name="l00135"></a><a class="code" href="MOOSGenLibGlobalHelper_8h.html#06f53fb7d459a36900ba4da3e25af1bc">00135</a> <span class="preprocessor">#define  MOOSHERE  MOOSFormat("File %s Line %d", __FILE__,__LINE__).c_str()</span>
<a name="l00136"></a>00136 <span class="preprocessor"></span>
<a name="l00138"></a>00138 <span class="keywordtype">void</span> Progress(<span class="keywordtype">double</span> dfPC);
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="comment">//these are used to let people format string used to control</span>
<a name="l00142"></a>00142 <span class="comment">//actuation (via a Thirdparty task) - one has to question why they are here though..</span>
<a name="l00143"></a>00143 std::string MOOSThirdPartyActuationString(<span class="keywordtype">double</span> * pdfRudder,<span class="keywordtype">double</span> * pdfElevator,<span class="keywordtype">double</span> * pdfThrust);
<a name="l00144"></a>00144 std::string MOOSThirdPartyStatusString(std::string sStatusCommand);
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 
<a name="l00148"></a>00148 
<a name="l00150"></a>00150 <span class="keywordtype">double</span> MOOS_ANGLE_WRAP(<span class="keywordtype">double</span> dfAng);
<a name="l00151"></a>00151 
<a name="l00153"></a>00153 <span class="keywordtype">double</span> MOOSDeg2Rad(<span class="keywordtype">double</span> dfDeg);
<a name="l00154"></a>00154 
<a name="l00156"></a>00156 <span class="keywordtype">double</span> MOOSRad2Deg(<span class="keywordtype">double</span> dfRad);
<a name="l00157"></a>00157 
<a name="l00159"></a>00159 <span class="keywordtype">bool</span> MOOSAbsLimit(<span class="keywordtype">double</span> &amp; dfVal,<span class="keywordtype">double</span> dfLimit);
<a name="l00160"></a>00160 
<a name="l00162"></a>00162 <span class="keywordtype">double</span> MOOSWhiteNoise(<span class="keywordtype">double</span> Sigma);
<a name="l00163"></a>00163 
<a name="l00165"></a>00165 <span class="keywordtype">double</span> MOOSNormalInv(<span class="keywordtype">double</span> dfArea);
<a name="l00166"></a>00166 
<a name="l00168"></a>00168 <span class="keywordtype">int</span> MOOSDiscreteUniform(<span class="keywordtype">int</span> nMin, <span class="keywordtype">int</span> nMax);
<a name="l00169"></a>00169 
<a name="l00171"></a>00171 <span class="keywordtype">double</span> MOOSUniformRandom(<span class="keywordtype">double</span> dfMin, <span class="keywordtype">double</span> dfMax);
<a name="l00172"></a>00172 
<a name="l00174"></a>00174 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; 
<a name="l00175"></a><a class="code" href="MOOSGenLibGlobalHelper_8h.html#5308933d1a11f3f0d3caefcb305e3238">00175</a> <span class="keyword">const</span> T&amp; <a class="code" href="MOOSGenLibGlobalHelper_8h.html#5308933d1a11f3f0d3caefcb305e3238">MOOSClamp</a>(<span class="keyword">const</span> T &amp;val, <span class="keyword">const</span> T &amp;min, <span class="keyword">const</span> T &amp;max)
<a name="l00176"></a>00176 {
<a name="l00177"></a>00177     <span class="keywordflow">if</span> (val &lt; min) <span class="keywordflow">return</span> min;
<a name="l00178"></a>00178     <span class="keywordflow">if</span> (max &lt; val) <span class="keywordflow">return</span> max;
<a name="l00179"></a>00179     <span class="keywordflow">else</span> <span class="keywordflow">return</span> val;
<a name="l00180"></a>00180 }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 
<a name="l00184"></a>00184 
<a name="l00188"></a>00188 <span class="keywordtype">bool</span> GetDirectoryContents(<span class="keyword">const</span> std::string &amp; sPath,std::list&lt;std::string&gt; &amp;sContents,<span class="keywordtype">bool</span> bFiles= <span class="keyword">true</span>);
<a name="l00189"></a>00189 
<a name="l00191"></a>00191 <span class="keywordtype">bool</span> <a class="code" href="MOOSGenLibGlobalHelper_8h.html#30c9c7ee37f73676f5caaf8750ea79fc">MOOSCreateDirectory</a>(<span class="keyword">const</span> std::string &amp; sDirectory);
<a name="l00192"></a>00192 
<a name="l00194"></a>00194 <span class="keywordtype">bool</span> <a class="code" href="MOOSGenLibGlobalHelper_8h.html#25ac5e7af927892ca697052240825f17">MOOSFileParts</a>(std::string sFullPath, std::string &amp; sPath,std::string &amp;sFile,std::string &amp; sExtension);
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 
<a name="l00198"></a>00198 
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 
<a name="l00203"></a><a class="code" href="MOOSGenLibGlobalHelper_8h.html#38949f7ce4629db52b3de5826a89c8fd">00203</a> <span class="keyword">template</span> &lt;<span class="keyword">class</span>  T &gt; T <a class="code" href="MOOSGenLibGlobalHelper_8h.html#38949f7ce4629db52b3de5826a89c8fd">SwapByteOrder</a>(<span class="keyword">const</span> T &amp;v)
<a name="l00204"></a>00204 {    
<a name="l00205"></a>00205     T r = v;
<a name="l00206"></a>00206     <span class="keywordtype">char</span> * aR = (<span class="keywordtype">char</span>*)&amp;r;
<a name="l00207"></a>00207     std::reverse(aR,aR+<span class="keyword">sizeof</span>(T));    
<a name="l00208"></a>00208     <span class="keywordflow">return</span> r;
<a name="l00209"></a>00209 }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00213"></a>00213 <span class="keywordtype">bool</span> IsLittleEndian();
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 
<a name="l00219"></a><a class="code" href="structstatic__caster.html">00219</a> <span class="keyword">template</span>&lt;<span class="keyword">class</span> D&gt; <span class="keyword">struct </span><a class="code" href="structstatic__caster.html">static_caster</a>
<a name="l00220"></a>00220 {
<a name="l00221"></a>00221     <span class="keyword">template</span>&lt;<span class="keyword">class</span> S&gt; D operator()(S s)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> static_cast&lt;D&gt; (s); }
<a name="l00222"></a>00222 };
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 
<a name="l00228"></a><a class="code" href="structdynamic__caster.html">00228</a> <span class="keyword">template</span>&lt;<span class="keyword">class</span> D&gt; <span class="keyword">struct </span><a class="code" href="structdynamic__caster.html">dynamic_caster</a>
<a name="l00229"></a>00229 {
<a name="l00230"></a>00230     <span class="keyword">template</span>&lt;<span class="keyword">class</span> S&gt; D operator()(S s)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> dynamic_cast&lt;D&gt; (s); }
<a name="l00231"></a>00231 };
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 
<a name="l00235"></a>00235 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00236"></a>00236 <span class="preprocessor"></span><span class="preprocessor">#define UNUSED_PARAMETER(a) a</span>
<a name="l00237"></a>00237 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00238"></a>00238 <span class="preprocessor"></span><span class="preprocessor">#define UNUSED_PARAMETER(a) </span>
<a name="l00239"></a>00239 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00240"></a>00240 <span class="preprocessor"></span>
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 <span class="preprocessor">#endif</span>
<a name="l00244"></a>00244 <span class="preprocessor"></span>
<a name="l00245"></a>00245 
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 
<a name="l00253"></a>00253 
<a name="l00254"></a>00254 
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 
<a name="l00268"></a>00268 
<a name="l00269"></a>00269 
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 
<a name="l00272"></a>00272 
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 
<a name="l00278"></a>00278 
<a name="l00279"></a>00279 
<a name="l00280"></a>00280 
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Fri Sep 28 20:14:21 2007 for MOOSGenLib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
