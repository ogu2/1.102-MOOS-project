<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="center">
  <p><img src="moose7.gif" width="105" height="84"> </p>
  <p><font size="+1" face="Arial, Helvetica, sans-serif">MOOS</font></p>
</div>
</body>
</html>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>/home/pnewman/code/MOOS/trunk/Core/MOOSGenLib/NTSerial.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">//   MOOS - Mission Oriented Operating Suite </span>
<a name="l00004"></a>00004 <span class="comment">//  </span>
<a name="l00005"></a>00005 <span class="comment">//   A suit of Applications and Libraries for Mobile Robotics Research </span>
<a name="l00006"></a>00006 <span class="comment">//   Copyright (C) 2001-2005 Massachusetts Institute of Technology and </span>
<a name="l00007"></a>00007 <span class="comment">//   Oxford University. </span>
<a name="l00008"></a>00008 <span class="comment">//    </span>
<a name="l00009"></a>00009 <span class="comment">//   This software was written by Paul Newman at MIT 2001-2002 and Oxford </span>
<a name="l00010"></a>00010 <span class="comment">//   University 2003-2005. email: pnewman@robots.ox.ac.uk. </span>
<a name="l00011"></a>00011 <span class="comment">//      </span>
<a name="l00012"></a>00012 <span class="comment">//   This file is part of a  MOOS Core Component. </span>
<a name="l00013"></a>00013 <span class="comment">//        </span>
<a name="l00014"></a>00014 <span class="comment">//   This program is free software; you can redistribute it and/or </span>
<a name="l00015"></a>00015 <span class="comment">//   modify it under the terms of the GNU General Public License as </span>
<a name="l00016"></a>00016 <span class="comment">//   published by the Free Software Foundation; either version 2 of the </span>
<a name="l00017"></a>00017 <span class="comment">//   License, or (at your option) any later version. </span>
<a name="l00018"></a>00018 <span class="comment">//          </span>
<a name="l00019"></a>00019 <span class="comment">//   This program is distributed in the hope that it will be useful, </span>
<a name="l00020"></a>00020 <span class="comment">//   but WITHOUT ANY WARRANTY; without even the implied warranty of </span>
<a name="l00021"></a>00021 <span class="comment">//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU </span>
<a name="l00022"></a>00022 <span class="comment">//   General Public License for more details. </span>
<a name="l00023"></a>00023 <span class="comment">//            </span>
<a name="l00024"></a>00024 <span class="comment">//   You should have received a copy of the GNU General Public License </span>
<a name="l00025"></a>00025 <span class="comment">//   along with this program; if not, write to the Free Software </span>
<a name="l00026"></a>00026 <span class="comment">//   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA </span>
<a name="l00027"></a>00027 <span class="comment">//   02111-1307, USA. </span>
<a name="l00028"></a>00028 <span class="comment">//</span>
<a name="l00030"></a>00030 <span class="comment"></span><span class="preprocessor">#ifdef _WIN32</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning(disable : 4786)</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">//    Serial.h - Definition of the CNTSerial class</span>
<a name="l00036"></a>00036 <span class="comment">//</span>
<a name="l00037"></a>00037 <span class="comment">//    Copyright (C) 1999-2001 Ramon de Klein (R.de.Klein@iaf.nl)</span>
<a name="l00038"></a>00038 <span class="comment">//</span>
<a name="l00039"></a>00039 <span class="comment">// This program is free software; you can redistribute it and/ormodify</span>
<a name="l00040"></a>00040 <span class="comment">// it under the terms of the GNU General Public License as published by</span>
<a name="l00041"></a>00041 <span class="comment">// the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00042"></a>00042 <span class="comment">// (at your option) any later version.</span>
<a name="l00043"></a>00043 <span class="comment">//</span>
<a name="l00044"></a>00044 <span class="comment">// This program is distributed in the hope that it will be useful,</span>
<a name="l00045"></a>00045 <span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00046"></a>00046 <span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00047"></a>00047 <span class="comment">// GNU General Public License for more details.</span>
<a name="l00048"></a>00048 <span class="comment">//</span>
<a name="l00049"></a>00049 <span class="comment">// You should have received a copy of the GNU General Public License</span>
<a name="l00050"></a>00050 <span class="comment">// along with this program; if not, write to the Free Software</span>
<a name="l00051"></a>00051 <span class="comment">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="preprocessor">#ifndef __SERIAL_H</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#define __SERIAL_H</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>
<a name="l00057"></a>00057 
<a name="l00059"></a>00059 <span class="comment">//</span>
<a name="l00060"></a>00060 <span class="comment">// CNTSerial - Win32 wrapper for serial communications</span>
<a name="l00061"></a>00061 <span class="comment">//</span>
<a name="l00062"></a>00062 <span class="comment">// Serial communication often causes a lot of problems. This class</span>
<a name="l00063"></a>00063 <span class="comment">// tries to supply an easy to use interface to deal with serial</span>
<a name="l00064"></a>00064 <span class="comment">// devices.</span>
<a name="l00065"></a>00065 <span class="comment">//</span>
<a name="l00066"></a>00066 <span class="comment">// The class is actually pretty ease to use. You only need to open</span>
<a name="l00067"></a>00067 <span class="comment">// the COM-port, where you need to specify the basic serial</span>
<a name="l00068"></a>00068 <span class="comment">// communication parameters. You can also choose to setup handshaking</span>
<a name="l00069"></a>00069 <span class="comment">// and read timeout behaviour.</span>
<a name="l00070"></a>00070 <span class="comment">//</span>
<a name="l00071"></a>00071 <span class="comment">// The following serial classes are available:</span>
<a name="l00072"></a>00072 <span class="comment">//</span>
<a name="l00073"></a>00073 <span class="comment">// CNTSerial      - Serial communication support.</span>
<a name="l00074"></a>00074 <span class="comment">// CNTSerialWnd   - Asynchronous serial support, which uses the Win32</span>
<a name="l00075"></a>00075 <span class="comment">//                message queue for event notification. This is often</span>
<a name="l00076"></a>00076 <span class="comment">//                preferred in GUI applications.</span>
<a name="l00077"></a>00077 <span class="comment">// CNTSerialMFC   - Preferred class to use in MFC-based GUI threads.</span>
<a name="l00078"></a>00078 <span class="comment">// </span>
<a name="l00079"></a>00079 <span class="comment">//</span>
<a name="l00080"></a>00080 <span class="comment">// Pros:</span>
<a name="l00081"></a>00081 <span class="comment">// -----</span>
<a name="l00082"></a>00082 <span class="comment">//    - Easy to use (hides a lot of nasty Win32 stuff)</span>
<a name="l00083"></a>00083 <span class="comment">//    - Fully ANSI and Unicode aware</span>
<a name="l00084"></a>00084 <span class="comment">//</span>
<a name="l00085"></a>00085 <span class="comment">// Cons:</span>
<a name="l00086"></a>00086 <span class="comment">// -----</span>
<a name="l00087"></a>00087 <span class="comment">//  - Little less flexibility then native Win32 API, however you can</span>
<a name="l00088"></a>00088 <span class="comment">//    use this API at the same time for features which are missing</span>
<a name="l00089"></a>00089 <span class="comment">//    from this class.</span>
<a name="l00090"></a>00090 <span class="comment">//  - Incompatible with Windows 95 or Windows NT v3.51 (or earlier),</span>
<a name="l00091"></a>00091 <span class="comment">//    because CancelIo isn't support on these platforms.</span>
<a name="l00092"></a>00092 <span class="comment">//</span>
<a name="l00093"></a>00093 <span class="comment">//</span>
<a name="l00094"></a>00094 <span class="comment">// Copyright (C) 1999-2001 Ramon de Klein</span>
<a name="l00095"></a>00095 <span class="comment">//                         (R.de.Klein@iaf.nl)</span>
<a name="l00096"></a>00096 <span class="preprocessor">#include "<a class="code" href="MOOSSerialPort_8h.html">MOOSSerialPort.h</a>"</span>
<a name="l00098"></a><a class="code" href="classCNTSerial.html">00098</a> <span class="keyword">class </span><a class="code" href="classCNTSerial.html">CNTSerial</a> : <span class="keyword">public</span> <a class="code" href="classCMOOSSerialPort.html">CMOOSSerialPort</a>
<a name="l00099"></a>00099 {
<a name="l00100"></a>00100 <span class="comment">// Class enumerations</span>
<a name="l00101"></a>00101 <span class="keyword">public</span>:
<a name="l00102"></a>00102     <span class="comment">// Communication event</span>
<a name="l00103"></a>00103     <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00104"></a>00104     {
<a name="l00105"></a>00105         EEventNone  = -1,            <span class="comment">// Event trigged without cause</span>
<a name="l00106"></a>00106         EEventBreak = EV_BREAK,        <span class="comment">// A break was detected on input</span>
<a name="l00107"></a>00107         EEventCTS   = EV_CTS,        <span class="comment">// The CTS signal changed state</span>
<a name="l00108"></a>00108         EEventDSR   = EV_DSR,        <span class="comment">// The DSR signal changed state</span>
<a name="l00109"></a>00109         EEventError = EV_ERR,        <span class="comment">// A line-status error occurred</span>
<a name="l00110"></a>00110         EEventRing  = EV_RING,        <span class="comment">// A ring indicator was detected</span>
<a name="l00111"></a>00111         EEventRLSD  = EV_RLSD,        <span class="comment">// The RLSD signal changed state</span>
<a name="l00112"></a>00112         EEventRecv  = EV_RXCHAR,    <span class="comment">// Data is received on input</span>
<a name="l00113"></a>00113         EEventRcvEv = EV_RXFLAG,    <span class="comment">// Event character was received on input</span>
<a name="l00114"></a>00114         EEventSend  = EV_TXEMPTY,    <span class="comment">// Last character on output was sent</span>
<a name="l00115"></a>00115     } 
<a name="l00116"></a>00116     EEvent;
<a name="l00117"></a>00117 
<a name="l00118"></a>00118     <span class="comment">// Baudrate</span>
<a name="l00119"></a>00119     <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121         EBaudUnknown = -1,            <span class="comment">// Unknown</span>
<a name="l00122"></a>00122         EBaud110     = CBR_110,        <span class="comment">// 110 bits/sec</span>
<a name="l00123"></a>00123         EBaud300     = CBR_300,        <span class="comment">// 300 bits/sec</span>
<a name="l00124"></a>00124         EBaud600     = CBR_600,        <span class="comment">// 600 bits/sec</span>
<a name="l00125"></a>00125         EBaud1200    = CBR_1200,    <span class="comment">// 1200 bits/sec</span>
<a name="l00126"></a>00126         EBaud2400    = CBR_2400,    <span class="comment">// 2400 bits/sec</span>
<a name="l00127"></a>00127         EBaud4800    = CBR_4800,    <span class="comment">// 4800 bits/sec</span>
<a name="l00128"></a>00128         EBaud9600    = CBR_9600,    <span class="comment">// 9600 bits/sec</span>
<a name="l00129"></a>00129         EBaud14400   = CBR_14400,    <span class="comment">// 14400 bits/sec</span>
<a name="l00130"></a>00130         EBaud19200   = CBR_19200,    <span class="comment">// 19200 bits/sec (default)</span>
<a name="l00131"></a>00131         EBaud38400   = CBR_38400,    <span class="comment">// 38400 bits/sec</span>
<a name="l00132"></a>00132         EBaud56000   = CBR_56000,    <span class="comment">// 56000 bits/sec</span>
<a name="l00133"></a>00133         EBaud57600   = CBR_57600,    <span class="comment">// 57600 bits/sec</span>
<a name="l00134"></a>00134         EBaud115200  = CBR_115200,    <span class="comment">// 115200 bits/sec</span>
<a name="l00135"></a>00135         EBaud128000  = CBR_128000,    <span class="comment">// 128000 bits/sec</span>
<a name="l00136"></a>00136         EBaud256000  = CBR_256000,    <span class="comment">// 256000 bits/sec</span>
<a name="l00137"></a>00137         EBaud500000  = 500000,        <span class="comment">// 500000 bits/sec</span>
<a name="l00138"></a>00138 
<a name="l00139"></a>00139         <span class="comment">// Added by ARH 14/05/2005 for use with</span>
<a name="l00140"></a>00140         <span class="comment">// the 500kBps CSM SIO PCMCIA serial card</span>
<a name="l00141"></a>00141         <span class="comment">// It has a non-standard crystal, so baud rates</span>
<a name="l00142"></a>00142         <span class="comment">// are set differently</span>
<a name="l00143"></a>00143         EBaudCSM9600   = 2150,
<a name="l00144"></a>00144         EBaudCSM19200  = 4301,
<a name="l00145"></a>00145         EBaudCSM38400  = 8602,
<a name="l00146"></a>00146         EBaudCSM500000 = 115000
<a name="l00147"></a>00147     }
<a name="l00148"></a>00148     EBaudrate;
<a name="l00149"></a>00149 
<a name="l00150"></a>00150     <span class="comment">// Data bits (5-8)</span>
<a name="l00151"></a>00151     <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00152"></a>00152     {
<a name="l00153"></a>00153         EDataUnknown = -1,            <span class="comment">// Unknown</span>
<a name="l00154"></a>00154         EData5       =  5,            <span class="comment">// 5 bits per byte</span>
<a name="l00155"></a>00155         EData6       =  6,            <span class="comment">// 6 bits per byte</span>
<a name="l00156"></a>00156         EData7       =  7,            <span class="comment">// 7 bits per byte</span>
<a name="l00157"></a>00157         EData8       =  8            <span class="comment">// 8 bits per byte (default)</span>
<a name="l00158"></a>00158     }
<a name="l00159"></a>00159     EDataBits;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <span class="comment">// Parity scheme</span>
<a name="l00162"></a>00162     <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00163"></a>00163     {
<a name="l00164"></a>00164         EParUnknown = -1,            <span class="comment">// Unknown</span>
<a name="l00165"></a>00165         EParNone    = NOPARITY,        <span class="comment">// No parity (default)</span>
<a name="l00166"></a>00166         EParOdd     = ODDPARITY,    <span class="comment">// Odd parity</span>
<a name="l00167"></a>00167         EParEven    = EVENPARITY,    <span class="comment">// Even parity</span>
<a name="l00168"></a>00168         EParMark    = MARKPARITY,    <span class="comment">// Mark parity</span>
<a name="l00169"></a>00169         EParSpace   = SPACEPARITY    <span class="comment">// Space parity</span>
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171     EParity;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173     <span class="comment">// Stop bits</span>
<a name="l00174"></a>00174     <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00175"></a>00175     {
<a name="l00176"></a>00176         EStopUnknown = -1,            <span class="comment">// Unknown</span>
<a name="l00177"></a>00177         EStop1       = ONESTOPBIT,    <span class="comment">// 1 stopbit (default)</span>
<a name="l00178"></a>00178         EStop1_5     = ONE5STOPBITS,<span class="comment">// 1.5 stopbit</span>
<a name="l00179"></a>00179         EStop2       = TWOSTOPBITS    <span class="comment">// 2 stopbits</span>
<a name="l00180"></a>00180     } 
<a name="l00181"></a>00181     EStopBits;
<a name="l00182"></a>00182 
<a name="l00183"></a>00183     <span class="comment">// Handshaking</span>
<a name="l00184"></a>00184     <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00185"></a>00185     {
<a name="l00186"></a>00186         EHandshakeUnknown        = -1,    <span class="comment">// Unknown</span>
<a name="l00187"></a>00187         EHandshakeOff            =  0,    <span class="comment">// No handshaking</span>
<a name="l00188"></a>00188         EHandshakeHardware        =  1,    <span class="comment">// Hardware handshaking (RTS/CTS)</span>
<a name="l00189"></a>00189         EHandshakeSoftware        =  2    <span class="comment">// Software handshaking (XON/XOFF)</span>
<a name="l00190"></a>00190     } 
<a name="l00191"></a>00191     EHandshake;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193     <span class="comment">// Timeout settings</span>
<a name="l00194"></a>00194     <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00195"></a>00195     {
<a name="l00196"></a>00196         EReadTimeoutUnknown        = -1,    <span class="comment">// Unknown</span>
<a name="l00197"></a>00197         EReadTimeoutNonblocking    =  0,    <span class="comment">// Always return immediately</span>
<a name="l00198"></a>00198         EReadTimeoutBlocking    =  1    <span class="comment">// Block until everything is retrieved</span>
<a name="l00199"></a>00199     }
<a name="l00200"></a>00200     EReadTimeout;
<a name="l00201"></a>00201 
<a name="l00202"></a>00202     <span class="comment">// Communication errors</span>
<a name="l00203"></a>00203     <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00204"></a>00204     {
<a name="l00205"></a>00205         EErrorUnknown = 0,            <span class="comment">// Unknown</span>
<a name="l00206"></a>00206         EErrorBreak   = CE_BREAK,    <span class="comment">// Break condition detected</span>
<a name="l00207"></a>00207         EErrorFrame   = CE_FRAME,    <span class="comment">// Framing error</span>
<a name="l00208"></a>00208         EErrorIOE     = CE_IOE,        <span class="comment">// I/O device error</span>
<a name="l00209"></a>00209         EErrorMode    = CE_MODE,    <span class="comment">// Unsupported mode</span>
<a name="l00210"></a>00210         EErrorOverrun = CE_OVERRUN,    <span class="comment">// Character buffer overrun, next byte is lost</span>
<a name="l00211"></a>00211         EErrorRxOver  = CE_RXOVER,    <span class="comment">// Input buffer overflow, byte lost</span>
<a name="l00212"></a>00212         EErrorParity  = CE_RXPARITY,<span class="comment">// Input parity error</span>
<a name="l00213"></a>00213         EErrorTxFull  = CE_TXFULL    <span class="comment">// Output buffer full</span>
<a name="l00214"></a>00214     }
<a name="l00215"></a>00215     EError;
<a name="l00216"></a>00216 
<a name="l00217"></a>00217     <span class="comment">// Port availability</span>
<a name="l00218"></a>00218     <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00219"></a>00219     {
<a name="l00220"></a>00220         EPortUnknownError = -1,        <span class="comment">// Unknown error occurred</span>
<a name="l00221"></a>00221         EPortAvailable    =  0,        <span class="comment">// Port is available</span>
<a name="l00222"></a>00222         EPortNotAvailable =  1,        <span class="comment">// Port is not present</span>
<a name="l00223"></a>00223         EPortInUse        =  2        <span class="comment">// Port is in use</span>
<a name="l00224"></a>00224 
<a name="l00225"></a>00225     } 
<a name="l00226"></a>00226     EPort;
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 <span class="comment">// Construction</span>
<a name="l00229"></a>00229 <span class="keyword">public</span>:
<a name="l00230"></a>00230     <a class="code" href="classCNTSerial.html">CNTSerial</a>();
<a name="l00231"></a>00231     <span class="keyword">virtual</span> ~<a class="code" href="classCNTSerial.html">CNTSerial</a>();
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="comment">// Operations</span>
<a name="l00234"></a>00234 <span class="keyword">public</span>:
<a name="l00235"></a>00235     <span class="comment">// Check if pareticular COM-port is available.</span>
<a name="l00236"></a>00236     EPort CheckPort (LPCTSTR lpszDevice);
<a name="l00237"></a>00237 
<a name="l00238"></a>00238     <span class="comment">// Open the serial communications for a particular COM port. You</span>
<a name="l00239"></a>00239     <span class="comment">// need to use the full devicename (i.e. "COM1") to open the port.</span>
<a name="l00240"></a>00240     <span class="comment">// It's possible to specify the size of the input/output queues.</span>
<a name="l00241"></a>00241     <span class="keyword">virtual</span> LONG Open (LPCTSTR lpszDevice, DWORD dwInQueue = 2048, DWORD dwOutQueue = 2048);
<a name="l00242"></a>00242 
<a name="l00243"></a>00243     <span class="comment">// Close the serial port.</span>
<a name="l00244"></a>00244     <span class="keyword">virtual</span> LONG ClosePort (<span class="keywordtype">void</span>);
<a name="l00245"></a>00245 
<a name="l00246"></a>00246     <span class="comment">// Setup the communication settings such as baudrate, databits,</span>
<a name="l00247"></a>00247     <span class="comment">// parity and stopbits. The default settings are applied when the</span>
<a name="l00248"></a>00248     <span class="comment">// device has been opened. Call this function if these settings do</span>
<a name="l00249"></a>00249     <span class="comment">// not apply for your application. If you prefer to use integers</span>
<a name="l00250"></a>00250     <span class="comment">// instead of the enumerated types then just cast the integer to</span>
<a name="l00251"></a>00251     <span class="comment">// the required type. So the following two initializations are</span>
<a name="l00252"></a>00252     <span class="comment">// equivalent:</span>
<a name="l00253"></a>00253     <span class="comment">//</span>
<a name="l00254"></a>00254     <span class="comment">//   Setup(EBaud9600,EData8,EParNone,EStop1)</span>
<a name="l00255"></a>00255     <span class="comment">//</span>
<a name="l00256"></a>00256     <span class="comment">// or</span>
<a name="l00257"></a>00257     <span class="comment">//</span>
<a name="l00258"></a>00258     <span class="comment">//   Setup(EBaudrate(9600),EDataBits(8),EParity(NOPARITY),EStopBits(ONESTOPBIT))</span>
<a name="l00259"></a>00259     <span class="comment">//</span>
<a name="l00260"></a>00260     <span class="comment">// In the latter case, the types are not validated. So make sure</span>
<a name="l00261"></a>00261     <span class="comment">// that you specify the appropriate values.</span>
<a name="l00262"></a>00262     <span class="keyword">virtual</span> LONG Setup (EBaudrate eBaudrate = EBaud9600,
<a name="l00263"></a>00263                         EDataBits eDataBits = EData8,
<a name="l00264"></a>00264                         EParity   eParity   = EParNone,
<a name="l00265"></a>00265                         EStopBits eStopBits = EStop1);
<a name="l00266"></a>00266 
<a name="l00267"></a>00267     <span class="comment">// Set/clear the event character. When this byte is being received</span>
<a name="l00268"></a>00268     <span class="comment">// on the serial port then the EEventRcvEv event is signalled,</span>
<a name="l00269"></a>00269     <span class="comment">// when the mask has been set appropriately. If the fAdjustMask flag</span>
<a name="l00270"></a>00270     <span class="comment">// has been set, then the event mask is automatically adjusted.</span>
<a name="l00271"></a>00271     <span class="keyword">virtual</span> LONG SetEventChar (BYTE bEventChar, <span class="keywordtype">bool</span> fAdjustMask = <span class="keyword">true</span>);
<a name="l00272"></a>00272 
<a name="l00273"></a>00273     <span class="comment">// Set the event mask, which indicates what events should be</span>
<a name="l00274"></a>00274     <span class="comment">// monitored. The WaitEvent method can only monitor events that</span>
<a name="l00275"></a>00275     <span class="comment">// have been enabled. The default setting only monitors the</span>
<a name="l00276"></a>00276     <span class="comment">// error events and data events. An application may choose to</span>
<a name="l00277"></a>00277     <span class="comment">// monitor CTS. DSR, RLSD, etc as well.</span>
<a name="l00278"></a>00278     <span class="keyword">virtual</span> LONG SetMask (DWORD dwMask = EEventBreak|EEventError|EEventRecv);
<a name="l00279"></a>00279 
<a name="l00280"></a>00280     <span class="comment">// The WaitEvent method waits for one of the events that are</span>
<a name="l00281"></a>00281     <span class="comment">// enabled (see SetMask).</span>
<a name="l00282"></a>00282     <span class="keyword">virtual</span> LONG WaitEvent (LPOVERLAPPED lpOverlapped = 0, DWORD dwTimeout = INFINITE);
<a name="l00283"></a>00283 
<a name="l00284"></a>00284     <span class="comment">// Setup the handshaking protocol. There are three forms of</span>
<a name="l00285"></a>00285     <span class="comment">// handshaking:</span>
<a name="l00286"></a>00286     <span class="comment">//</span>
<a name="l00287"></a>00287     <span class="comment">// 1) No handshaking, so data is always send even if the receiver</span>
<a name="l00288"></a>00288     <span class="comment">//    cannot handle the data anymore. This can lead to data loss,</span>
<a name="l00289"></a>00289     <span class="comment">//    when the sender is able to transmit data faster then the</span>
<a name="l00290"></a>00290     <span class="comment">//    receiver can handle.</span>
<a name="l00291"></a>00291     <span class="comment">// 2) Hardware handshaking, where the RTS/CTS lines are used to</span>
<a name="l00292"></a>00292     <span class="comment">//    indicate if data can be sent. This mode requires that both</span>
<a name="l00293"></a>00293     <span class="comment">//    ports and the cable support hardware handshaking. Hardware</span>
<a name="l00294"></a>00294     <span class="comment">//    handshaking is the most reliable and efficient form of</span>
<a name="l00295"></a>00295     <span class="comment">//    handshaking available, but is hardware dependant.</span>
<a name="l00296"></a>00296     <span class="comment">// 3) Software handshaking, where the XON/XOFF characters are used</span>
<a name="l00297"></a>00297     <span class="comment">//    to throttle the data. A major drawback of this method is that</span>
<a name="l00298"></a>00298     <span class="comment">//    these characters cannot be used for data anymore.</span>
<a name="l00299"></a>00299     <span class="keyword">virtual</span> LONG SetupHandshaking (EHandshake eHandshake);
<a name="l00300"></a>00300 
<a name="l00301"></a>00301     <span class="comment">// Read operations can be blocking or non-blocking. You can use</span>
<a name="l00302"></a>00302     <span class="comment">// this method to setup wether to use blocking or non-blocking</span>
<a name="l00303"></a>00303     <span class="comment">// reads. Non-blocking reads is the default, which is required</span>
<a name="l00304"></a>00304     <span class="comment">// for most applications.</span>
<a name="l00305"></a>00305     <span class="comment">//</span>
<a name="l00306"></a>00306     <span class="comment">// 1) Blocking reads, which will cause the 'Read' method to block</span>
<a name="l00307"></a>00307     <span class="comment">//    until the requested number of bytes have been read. This is</span>
<a name="l00308"></a>00308     <span class="comment">//    useful if you know how many data you will receive.</span>
<a name="l00309"></a>00309     <span class="comment">// 2) Non-blocking reads, which will read as many bytes into your</span>
<a name="l00310"></a>00310     <span class="comment">//    buffer and returns almost immediately. This is often the</span>
<a name="l00311"></a>00311     <span class="comment">//    preferred setting.</span>
<a name="l00312"></a>00312     <span class="keyword">virtual</span> LONG SetupReadTimeouts (EReadTimeout eReadTimeout);
<a name="l00313"></a>00313 
<a name="l00314"></a>00314     <span class="comment">// Obtain communication settings</span>
<a name="l00315"></a>00315     <span class="keyword">virtual</span> EBaudrate  GetBaudrate    (<span class="keywordtype">void</span>);
<a name="l00316"></a>00316     <span class="keyword">virtual</span> EDataBits  GetDataBits    (<span class="keywordtype">void</span>);
<a name="l00317"></a>00317     <span class="keyword">virtual</span> EParity    GetParity      (<span class="keywordtype">void</span>);
<a name="l00318"></a>00318     <span class="keyword">virtual</span> EStopBits  GetStopBits    (<span class="keywordtype">void</span>);
<a name="l00319"></a>00319     <span class="keyword">virtual</span> EHandshake GetHandshaking (<span class="keywordtype">void</span>);
<a name="l00320"></a>00320     <span class="keyword">virtual</span> DWORD      GetEventMask   (<span class="keywordtype">void</span>);
<a name="l00321"></a>00321     <span class="keyword">virtual</span> BYTE       GetEventChar   (<span class="keywordtype">void</span>);
<a name="l00322"></a>00322 
<a name="l00323"></a>00323     <span class="comment">// Write data to the serial port. Note that we are only able to</span>
<a name="l00324"></a>00324     <span class="comment">// send ANSI strings, because it probably doesn't make sense to</span>
<a name="l00325"></a>00325     <span class="comment">// transmit Unicode strings to an application.</span>
<a name="l00326"></a>00326     <span class="keyword">virtual</span> LONG Write (<span class="keyword">const</span> <span class="keywordtype">void</span>* pData, size_t iLen, DWORD* pdwWritten = 0, LPOVERLAPPED lpOverlapped = 0, DWORD dwTimeout = INFINITE);
<a name="l00327"></a>00327     <span class="keyword">virtual</span> LONG Write (LPCSTR pString, DWORD* pdwWritten = 0, LPOVERLAPPED lpOverlapped = 0, DWORD dwTimeout = INFINITE);
<a name="l00328"></a>00328 
<a name="l00329"></a>00329     <span class="comment">// Read data from the serial port. Refer to the description of</span>
<a name="l00330"></a>00330     <span class="comment">// the 'SetupReadTimeouts' for an explanation about (non) blocking</span>
<a name="l00331"></a>00331     <span class="comment">// reads and how to use this.</span>
<a name="l00332"></a>00332     <span class="keyword">virtual</span> LONG NTRead (<span class="keywordtype">void</span>* pData, size_t iLen, DWORD* pdwRead = 0, LPOVERLAPPED lpOverlapped = 0, DWORD dwTimeout = INFINITE);
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     <span class="comment">// Determine what caused the event to trigger</span>
<a name="l00335"></a>00335     EEvent GetEventType (<span class="keywordtype">void</span>);
<a name="l00336"></a>00336 
<a name="l00337"></a>00337     <span class="comment">// Obtain the error</span>
<a name="l00338"></a>00338     EError GetError (<span class="keywordtype">void</span>);
<a name="l00339"></a>00339 
<a name="l00340"></a>00340     <span class="comment">// Obtain the COMM and event handle</span>
<a name="l00341"></a>00341     HANDLE GetCommHandle (<span class="keywordtype">void</span>)        { <span class="keywordflow">return</span> m_hFile; }
<a name="l00342"></a>00342 
<a name="l00343"></a>00343     <span class="comment">// Check if com-port is opened</span>
<a name="l00344"></a>00344     <span class="keywordtype">bool</span> IsOpen (<span class="keywordtype">void</span>)<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> (m_hFile != 0); }
<a name="l00345"></a>00345 
<a name="l00346"></a>00346     <span class="comment">// Obtain last error status</span>
<a name="l00347"></a>00347     LONG GetLastError (<span class="keywordtype">void</span>)<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> m_lLastError; }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349     <span class="comment">// Obtain CTS/DSR/RING/RLSD settings</span>
<a name="l00350"></a>00350     <span class="keywordtype">bool</span> GetCTS (<span class="keywordtype">void</span>);
<a name="l00351"></a>00351     <span class="keywordtype">bool</span> GetDSR (<span class="keywordtype">void</span>);
<a name="l00352"></a>00352     <span class="keywordtype">bool</span> GetRing (<span class="keywordtype">void</span>);
<a name="l00353"></a>00353     <span class="keywordtype">bool</span> GetRLSD (<span class="keywordtype">void</span>);
<a name="l00354"></a>00354 
<a name="l00355"></a>00355     <span class="comment">// Flush all buffers</span>
<a name="l00356"></a>00356     <span class="keyword">virtual</span> <span class="keywordtype">int</span> Flush (<span class="keywordtype">void</span>);
<a name="l00357"></a>00357 
<a name="l00358"></a>00358 <span class="keyword">protected</span>:
<a name="l00359"></a>00359     <span class="comment">// Internal helper class which wraps DCB structure</span>
<a name="l00360"></a>00360     <span class="keyword">class </span>CDCB : <span class="keyword">public</span> DCB
<a name="l00361"></a>00361     {
<a name="l00362"></a>00362     <span class="keyword">public</span>:
<a name="l00363"></a>00363         CDCB() { DCBlength = <span class="keyword">sizeof</span>(DCB); }
<a name="l00364"></a>00364     };
<a name="l00365"></a>00365 
<a name="l00366"></a>00366 <span class="comment">// Attributes</span>
<a name="l00367"></a>00367 <span class="keyword">protected</span>:
<a name="l00368"></a>00368 
<a name="l00369"></a>00369     LONG    m_lLastError;        <span class="comment">// Last serial error</span>
<a name="l00370"></a>00370     HANDLE    m_hFile;            <span class="comment">// File handle</span>
<a name="l00371"></a>00371     EEvent    m_eEvent;            <span class="comment">// Event type</span>
<a name="l00372"></a>00372     HANDLE    m_hevtOverlapped;    <span class="comment">// Event handle for internal overlapped operations</span>
<a name="l00373"></a>00373 };
<a name="l00374"></a>00374 
<a name="l00375"></a>00375 <span class="preprocessor">#endif    // __SERIAL_H</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Fri Sep 28 20:14:21 2007 for MOOSGenLib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
