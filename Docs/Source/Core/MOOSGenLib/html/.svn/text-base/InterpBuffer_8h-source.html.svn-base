<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="center">
  <p><img src="moose7.gif" width="105" height="84"> </p>
  <p><font size="+1" face="Arial, Helvetica, sans-serif">MOOS</font></p>
</div>
</body>
</html>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>/home/pnewman/code/MOOS/trunk/Core/MOOSGenLib/InterpBuffer.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">//   MOOS - Mission Oriented Operating Suite </span>
<a name="l00004"></a>00004 <span class="comment">//  </span>
<a name="l00005"></a>00005 <span class="comment">//   A suit of Applications and Libraries for Mobile Robotics Research </span>
<a name="l00006"></a>00006 <span class="comment">//   Copyright (C) 2001-2005 Massachusetts Institute of Technology and </span>
<a name="l00007"></a>00007 <span class="comment">//   Oxford University. </span>
<a name="l00008"></a>00008 <span class="comment">//      </span>
<a name="l00009"></a>00009 <span class="comment">//   This software was written by Paul Newman at MIT 2001-2002 and Oxford </span>
<a name="l00010"></a>00010 <span class="comment">//   University 2003-2005. email: pnewman@robots.ox.ac.uk. </span>
<a name="l00011"></a>00011 <span class="comment">//        </span>
<a name="l00012"></a>00012 <span class="comment">//   This file is part of a  MOOS Core Component. </span>
<a name="l00013"></a>00013 <span class="comment">//              </span>
<a name="l00014"></a>00014 <span class="comment">//   This program is free software; you can redistribute it and/or </span>
<a name="l00015"></a>00015 <span class="comment">//   modify it under the terms of the GNU General Public License as </span>
<a name="l00016"></a>00016 <span class="comment">//   published by the Free Software Foundation; either version 2 of the </span>
<a name="l00017"></a>00017 <span class="comment">//   License, or (at your option) any later version. </span>
<a name="l00018"></a>00018 <span class="comment">//                </span>
<a name="l00019"></a>00019 <span class="comment">//   This program is distributed in the hope that it will be useful, </span>
<a name="l00020"></a>00020 <span class="comment">//   but WITHOUT ANY WARRANTY; without even the implied warranty of </span>
<a name="l00021"></a>00021 <span class="comment">//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU </span>
<a name="l00022"></a>00022 <span class="comment">//   General Public License for more details. </span>
<a name="l00023"></a>00023 <span class="comment">//                      </span>
<a name="l00024"></a>00024 <span class="comment">//   You should have received a copy of the GNU General Public License </span>
<a name="l00025"></a>00025 <span class="comment">//   along with this program; if not, write to the Free Software </span>
<a name="l00026"></a>00026 <span class="comment">//   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA </span>
<a name="l00027"></a>00027 <span class="comment">//   02111-1307, USA. </span>
<a name="l00028"></a>00028 <span class="comment">//</span>
<a name="l00030"></a>00030 <span class="comment"></span><span class="preprocessor">#ifndef INTERP_BUFFER_H</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#define INTERP_BUFFER_H</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include "<a class="code" href="MOOSGenLibGlobalHelper_8h.html">MOOSGenLibGlobalHelper.h</a>"</span>
<a name="l00038"></a>00038 
<a name="l00040"></a>00040 <span class="keyword">template</span>&lt; <span class="keyword">class</span> Key, <span class="keyword">class</span> Data, <span class="keyword">class</span> InterpFunc, <span class="keyword">class</span> Compare=std::less&lt;Key&gt; &gt; 
<a name="l00041"></a><a class="code" href="classTInterpBuffer.html">00041</a> <span class="keyword">class </span><a class="code" href="classTInterpBuffer.html">TInterpBuffer</a> : <span class="keyword">public</span> std::map&lt;Key,Data,Compare&gt;
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043     
<a name="l00044"></a>00044     <span class="keyword">typedef</span> std::map&lt;Key,Data,Compare&gt; BASE_TYPE;
<a name="l00045"></a>00045     
<a name="l00046"></a>00046         InterpFunc m_linearinterp;
<a name="l00047"></a>00047 <span class="keyword">public</span>:
<a name="l00048"></a>00048     <span class="keywordtype">void</span> SetInterpFunc(<span class="keyword">const</span> InterpFunc &amp;interp) {m_linearinterp = interp;}
<a name="l00049"></a>00049     InterpFunc &amp;GetInterpFunc() {<span class="keywordflow">return</span> m_linearinterp; }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051     <span class="comment">// const version</span>
<a name="l00052"></a>00052     Data operator()(<span class="keyword">const</span> Key &amp;interp_time)<span class="keyword"> const</span>
<a name="l00053"></a>00053 <span class="keyword">    </span>{
<a name="l00054"></a>00054         assert(this-&gt;size() &gt; 0 );
<a name="l00055"></a>00055         
<a name="l00056"></a>00056         <span class="keywordflow">if</span> (this-&gt;size()==1) <span class="keywordflow">return</span> this-&gt;begin()-&gt;second;
<a name="l00057"></a>00057 
<a name="l00058"></a>00058        <span class="keyword">typename</span> BASE_TYPE::const_iterator hi;
<a name="l00059"></a>00059        <span class="keyword">typename</span> BASE_TYPE::const_iterator low;
<a name="l00060"></a>00060         
<a name="l00061"></a>00061         hi = lower_bound(interp_time);
<a name="l00062"></a>00062         low = hi; std::advance(low,-1);
<a name="l00063"></a>00063         <span class="keywordflow">if</span> (hi != this-&gt;begin()  &amp;&amp; hi != this-&gt;end())
<a name="l00064"></a>00064         {
<a name="l00065"></a>00065             <span class="keywordflow">return</span> m_linearinterp(*low,*hi,interp_time);
<a name="l00066"></a>00066         }
<a name="l00067"></a>00067         <span class="keywordflow">else</span>
<a name="l00068"></a>00068         {
<a name="l00069"></a>00069             <span class="keywordflow">if</span> (hi == this-&gt;begin()) 
<a name="l00070"></a>00070             {
<a name="l00071"></a>00071                 <span class="keyword">typename</span> BASE_TYPE::const_iterator hi2 = hi; hi2++;
<a name="l00072"></a>00072                 <span class="keywordflow">return</span> m_linearinterp(*hi,*hi2,interp_time);
<a name="l00073"></a>00073             }
<a name="l00074"></a>00074             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (hi == this-&gt;end()) 
<a name="l00075"></a>00075             {
<a name="l00076"></a>00076                 <span class="keyword">typename</span> BASE_TYPE::const_iterator low2 = low;
<a name="l00077"></a>00077                                 std::advance(low2,-1);
<a name="l00078"></a>00078                 <span class="keywordflow">return</span> m_linearinterp(*low2,*low,interp_time);
<a name="l00079"></a>00079             }
<a name="l00080"></a>00080         }
<a name="l00081"></a>00081         assert(<span class="stringliteral">"should not get here"</span>==0);
<a name="l00082"></a>00082         <span class="keywordflow">return</span> Data();
<a name="l00083"></a>00083     }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     <span class="comment">// Non-const version</span>
<a name="l00088"></a>00088     <span class="comment">/*</span>
<a name="l00089"></a>00089 <span class="comment">    Data operator()(const Key &amp;interp_time)</span>
<a name="l00090"></a>00090 <span class="comment">    {</span>
<a name="l00091"></a>00091 <span class="comment">        assert(this-&gt;size() &gt; 0 );</span>
<a name="l00092"></a>00092 <span class="comment">        </span>
<a name="l00093"></a>00093 <span class="comment">        if (this-&gt;size()==1) return this-&gt;begin()-&gt;second;</span>
<a name="l00094"></a>00094 <span class="comment"></span>
<a name="l00095"></a>00095 <span class="comment">       typename BASE_TYPE::const_iterator hi;</span>
<a name="l00096"></a>00096 <span class="comment">       typename BASE_TYPE::const_iterator low;</span>
<a name="l00097"></a>00097 <span class="comment">        </span>
<a name="l00098"></a>00098 <span class="comment">        hi = lower_bound(interp_time);</span>
<a name="l00099"></a>00099 <span class="comment">        low = hi; std::advance(low,-1);</span>
<a name="l00100"></a>00100 <span class="comment">        if (hi != this-&gt;begin()  &amp;&amp; hi != this-&gt;end())</span>
<a name="l00101"></a>00101 <span class="comment">        {</span>
<a name="l00102"></a>00102 <span class="comment">            return m_linearinterp(*low,*hi,interp_time);</span>
<a name="l00103"></a>00103 <span class="comment">        }</span>
<a name="l00104"></a>00104 <span class="comment">        else</span>
<a name="l00105"></a>00105 <span class="comment">        {</span>
<a name="l00106"></a>00106 <span class="comment">            if (hi == this-&gt;begin()) </span>
<a name="l00107"></a>00107 <span class="comment">            {</span>
<a name="l00108"></a>00108 <span class="comment">                typename BASE_TYPE::const_iterator hi2 = hi; hi2++;</span>
<a name="l00109"></a>00109 <span class="comment">                return m_linearinterp(*hi,*hi2,interp_time);</span>
<a name="l00110"></a>00110 <span class="comment">            }</span>
<a name="l00111"></a>00111 <span class="comment">            else if (hi == this-&gt;end()) </span>
<a name="l00112"></a>00112 <span class="comment">            {</span>
<a name="l00113"></a>00113 <span class="comment">                typename BASE_TYPE::const_iterator low2 = low;</span>
<a name="l00114"></a>00114 <span class="comment">                                std::advance(low2,-1);</span>
<a name="l00115"></a>00115 <span class="comment">                return m_linearinterp(*low2,*low,interp_time);</span>
<a name="l00116"></a>00116 <span class="comment">            }</span>
<a name="l00117"></a>00117 <span class="comment">        }</span>
<a name="l00118"></a>00118 <span class="comment">        assert("should not get here"==0);</span>
<a name="l00119"></a>00119 <span class="comment">        return Data();</span>
<a name="l00120"></a>00120 <span class="comment">    }</span>
<a name="l00121"></a>00121 <span class="comment"></span>
<a name="l00122"></a>00122 <span class="comment">    */</span>
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 
<a name="l00126"></a>00126     <span class="keywordtype">void</span> MakeSpanTime(<span class="keywordtype">double</span> dfSpan)
<a name="l00127"></a>00127     {
<a name="l00128"></a>00128                 EraseOld(MaxKey()-dfSpan);
<a name="l00129"></a>00129     }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 
<a name="l00132"></a>00132     <span class="keywordtype">void</span> EraseOld(<span class="keywordtype">double</span> dfTime)
<a name="l00133"></a>00133     {
<a name="l00134"></a>00134         <span class="keyword">typename</span> BASE_TYPE::iterator oldest = this-&gt;lower_bound(dfTime);
<a name="l00135"></a>00135         erase(this-&gt;begin(),oldest);
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138     Key MaxKey()<span class="keyword"> const</span>
<a name="l00139"></a>00139 <span class="keyword">    </span>{
<a name="l00140"></a>00140         Key maxkey;
<a name="l00141"></a>00141         <span class="keywordflow">if</span> (this-&gt;size())
<a name="l00142"></a>00142         {
<a name="l00143"></a>00143             maxkey = this-&gt;rbegin()-&gt;first;
<a name="l00144"></a>00144         }
<a name="l00145"></a>00145         <span class="keywordflow">return</span> maxkey;
<a name="l00146"></a>00146     }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148     Key MinKey()<span class="keyword"> const</span>
<a name="l00149"></a>00149 <span class="keyword">    </span>{
<a name="l00150"></a>00150                 Key minkey;
<a name="l00151"></a>00151                 
<a name="l00152"></a>00152                 <span class="keywordflow">if</span>(this-&gt;size())
<a name="l00153"></a>00153                 {
<a name="l00154"></a>00154                         minkey = this-&gt;begin()-&gt;first;      
<a name="l00155"></a>00155                 }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157                 <span class="keywordflow">return</span> minkey;          
<a name="l00158"></a>00158     };
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <span class="keywordtype">bool</span> MaxData(Data &amp; D)<span class="keyword"> const</span>
<a name="l00162"></a>00162 <span class="keyword">        </span>{
<a name="l00163"></a>00163                 <span class="keywordflow">if</span>(this-&gt;size())
<a name="l00164"></a>00164                 {
<a name="l00165"></a>00165                         D  = this-&gt;rbegin()-&gt;second;
<a name="l00166"></a>00166                         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00167"></a>00167                 }
<a name="l00168"></a>00168                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00169"></a>00169         }
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 };
<a name="l00172"></a>00172 
<a name="l00174"></a>00174 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00175"></a><a class="code" href="classCTimeNumericInterpolator.html">00175</a> <span class="keyword">class </span><a class="code" href="classCTimeNumericInterpolator.html">CTimeNumericInterpolator</a> 
<a name="l00176"></a>00176 {
<a name="l00177"></a>00177         <span class="keyword">public</span>:
<a name="l00178"></a>00178         <span class="comment">//return object with time closest to requested time</span>
<a name="l00179"></a>00179         <span class="keyword">typedef</span> std::pair&lt;double,T&gt; TIME_DOUBLE_NUM_PAIR;
<a name="l00180"></a>00180 
<a name="l00181"></a>00181         T operator()(<span class="keyword">const</span> TIME_DOUBLE_NUM_PAIR &amp;loPair, <span class="keyword">const</span> TIME_DOUBLE_NUM_PAIR &amp;hiPair, <span class="keywordtype">double</span> dfInterpTime)<span class="keyword"> const </span>
<a name="l00182"></a>00182 <span class="keyword">        </span>{   
<a name="l00183"></a>00183 
<a name="l00184"></a>00184                 <span class="keywordtype">double</span> dfLoTime = loPair.first;
<a name="l00185"></a>00185                 <span class="keywordtype">double</span> dfHiTime = hiPair.first;
<a name="l00186"></a>00186 
<a name="l00187"></a>00187                 <span class="keywordtype">double</span> dfMidTime;  
<a name="l00188"></a>00188                 
<a name="l00189"></a>00189                 dfMidTime = dfInterpTime;    
<a name="l00190"></a>00190                 
<a name="l00191"></a>00191                 <span class="keywordtype">double</span> dt = (dfHiTime - dfLoTime);    
<a name="l00192"></a>00192                 
<a name="l00193"></a>00193                 <span class="keywordtype">double</span> alpha = 0.0;    
<a name="l00194"></a>00194                 
<a name="l00195"></a>00195                 <span class="keywordflow">if</span> ( dt != 0.0 ) 
<a name="l00196"></a>00196                 {      
<a name="l00197"></a>00197                         alpha = (dfMidTime - dfLoTime) / dt; 
<a name="l00198"></a>00198                 }    
<a name="l00199"></a>00199                 
<a name="l00200"></a>00200                 <span class="keywordflow">if</span>(fabs(alpha)&gt;1.0)
<a name="l00201"></a>00201                 {
<a name="l00202"></a>00202                         <span class="keywordflow">if</span>( ((fabs(alpha)-1.0)*dt)&gt;0.5)
<a name="l00203"></a>00203                         {
<a name="l00204"></a>00204                                 <a class="code" href="MOOSGenLibGlobalHelper_8h.html#433edb220f29b9962235c1c246e0d993">MOOSTrace</a>(<span class="stringliteral">"Warning more than 0.5 seconds data extrapolation (%f)\n"</span>,(fabs(alpha)-1.0)*dt);
<a name="l00205"></a>00205                         }
<a name="l00206"></a>00206                 }
<a name="l00207"></a>00207 
<a name="l00208"></a>00208                 <span class="keyword">const</span> T &amp; Lo = loPair.second;
<a name="l00209"></a>00209                 <span class="keyword">const</span> T &amp; Hi = hiPair.second;
<a name="l00210"></a>00210 
<a name="l00211"></a>00211                 T MidVal = alpha*Hi + (1-alpha)*Lo;
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 
<a name="l00214"></a>00214                 <span class="keywordflow">return</span> MidVal;
<a name="l00215"></a>00215         }
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 };
<a name="l00218"></a>00218 
<a name="l00220"></a>00220 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00221"></a><a class="code" href="classCTimeGenericInterpolator.html">00221</a> <span class="keyword">class </span><a class="code" href="classCTimeGenericInterpolator.html">CTimeGenericInterpolator</a>
<a name="l00222"></a>00222 {
<a name="l00223"></a>00223         <span class="keyword">public</span>:
<a name="l00224"></a>00224         
<a name="l00225"></a>00225         <span class="keyword">typedef</span> std::pair&lt;double,T&gt; TIME_DOUBLE_VAL_PAIR;
<a name="l00226"></a>00226 
<a name="l00227"></a>00227         T operator()(<span class="keyword">const</span> TIME_DOUBLE_VAL_PAIR &amp;loPair, <span class="keyword">const</span> TIME_DOUBLE_VAL_PAIR &amp;hiPair, <span class="keywordtype">double</span> dfInterpTime)<span class="keyword"> const</span>
<a name="l00228"></a>00228 <span class="keyword">        </span>{   
<a name="l00229"></a>00229 
<a name="l00230"></a>00230                 <span class="keywordtype">double</span> dfLoTime = loPair.first;
<a name="l00231"></a>00231                 <span class="keywordtype">double</span> dfHiTime = hiPair.first;
<a name="l00232"></a>00232 
<a name="l00233"></a>00233                 <span class="keywordtype">double</span> dfMidTime;  
<a name="l00234"></a>00234                 
<a name="l00235"></a>00235                 dfMidTime = dfInterpTime;    
<a name="l00236"></a>00236                 
<a name="l00237"></a>00237                 <span class="keywordtype">double</span> dt = (dfHiTime - dfLoTime);    
<a name="l00238"></a>00238                 
<a name="l00239"></a>00239                 <span class="keywordtype">double</span> alpha = 0.0;    
<a name="l00240"></a>00240                 
<a name="l00241"></a>00241                 <span class="keywordflow">if</span> ( dt != 0.0 ) 
<a name="l00242"></a>00242                 {      
<a name="l00243"></a>00243                         alpha = (dfMidTime - dfLoTime) / dt; 
<a name="l00244"></a>00244                 }    
<a name="l00245"></a>00245                 
<a name="l00246"></a>00246                 <span class="keywordflow">if</span>(fabs(alpha)&gt;1.0)
<a name="l00247"></a>00247                 {
<a name="l00248"></a>00248                         <span class="keywordflow">if</span>( ((fabs(alpha)-1.0)*dt)&gt;0.5)
<a name="l00249"></a>00249                         {
<a name="l00250"></a>00250                                 <a class="code" href="MOOSGenLibGlobalHelper_8h.html#433edb220f29b9962235c1c246e0d993">MOOSTrace</a>(<span class="stringliteral">"Warning more than 0.5 seconds data extrapolation (%f)\n"</span>,(fabs(alpha)-1.0)*dt);
<a name="l00251"></a>00251                         }
<a name="l00252"></a>00252                 }
<a name="l00253"></a>00253 
<a name="l00254"></a>00254                 <span class="keyword">const</span> T &amp; Lo = loPair.second;
<a name="l00255"></a>00255                 <span class="keyword">const</span> T &amp; Hi = hiPair.second;
<a name="l00256"></a>00256                 T Mid;
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 
<a name="l00259"></a>00259                 <span class="keywordtype">double</span> dfValLo,dfValHi;
<a name="l00260"></a>00260                 <span class="keywordtype">int</span> i = 0;
<a name="l00261"></a>00261                 <span class="keywordflow">while</span>(Lo.GetInterpValue(i,dfValLo) &amp;&amp; Hi.GetInterpValue(i,dfValHi))
<a name="l00262"></a>00262                 {
<a name="l00263"></a>00263                         <span class="keywordtype">double</span> dfMidVal = alpha*dfValHi + (1-alpha)*dfValLo;
<a name="l00264"></a>00264                         Mid.SetInterpValue(i++,dfMidVal);
<a name="l00265"></a>00265                 }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 
<a name="l00268"></a>00268                 <span class="keywordflow">return</span> Mid;
<a name="l00269"></a>00269         }
<a name="l00270"></a>00270 };
<a name="l00271"></a>00271 
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00275"></a><a class="code" href="classClosestInterpFunc.html">00275</a> <span class="keyword">class </span><a class="code" href="classClosestInterpFunc.html">ClosestInterpFunc</a>
<a name="l00276"></a>00276 {
<a name="l00277"></a>00277         <span class="keyword">typedef</span> std::pair&lt;double, T &gt; val_type;
<a name="l00278"></a>00278         <span class="keyword">public</span>:
<a name="l00279"></a>00279         <span class="comment">//return object with time closest to requested time</span>
<a name="l00280"></a>00280         T operator()(<span class="keyword">const</span> val_type &amp;loPair, <span class="keyword">const</span> val_type &amp;hiPair, <span class="keywordtype">double</span> interp_time)<span class="keyword"> const</span>
<a name="l00281"></a>00281 <span class="keyword">        </span>{   
<a name="l00282"></a>00282                 <span class="keywordflow">return</span> fabs(interp_time-hiPair.first)&gt;fabs(interp_time-loPair.first) ? loPair.second : hiPair.second;
<a name="l00283"></a>00283         }
<a name="l00284"></a>00284 };
<a name="l00285"></a>00285 
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 <span class="preprocessor">#endif</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue Mar 13 10:23:13 2007 for MOOSGenLib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
