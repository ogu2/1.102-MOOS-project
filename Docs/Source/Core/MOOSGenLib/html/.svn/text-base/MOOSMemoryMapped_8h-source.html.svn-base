<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="center">
  <p><img src="moose7.gif" width="105" height="84"> </p>
  <p><font size="+1" face="Arial, Helvetica, sans-serif">MOOS</font></p>
</div>
</body>
</html>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>/home/pnewman/code/MOOS/trunk/Core/MOOSGenLib/MOOSMemoryMapped.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable : 4786)</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span><span class="preprocessor">#pragma warning(disable : 4996)</span>
<a name="l00004"></a>00004 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00005"></a>00005 <span class="preprocessor"></span>
<a name="l00006"></a>00006 <span class="preprocessor">#ifndef MOOSMemoryMappedH</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span><span class="preprocessor">#define MOOSMemoryMappedH</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span>
<a name="l00009"></a>00009 
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00014"></a>00014 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;iomanip&gt;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#else</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#include &lt;unistd.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;sys/types.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;sys/mman.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;sys/fcntl.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;sys/stat.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;ctype.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#endif </span>
<a name="l00032"></a>00032 <span class="preprocessor"></span>
<a name="l00033"></a>00033 <span class="keyword">class </span>CMOOSMemMappedFile
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 <span class="keyword">public</span>:
<a name="l00037"></a>00037     CMOOSMemMappedFile()
<a name="l00038"></a>00038     {
<a name="l00039"></a>00039         m_hMapHandle = 0;
<a name="l00040"></a>00040         m_pBuffer = NULL;
<a name="l00041"></a>00041         m_nSize = -1;
<a name="l00042"></a>00042     }
<a name="l00043"></a>00043     
<a name="l00044"></a>00044     <span class="keywordtype">bool</span> Open(<span class="keyword">const</span> std::string &amp; sfName)
<a name="l00045"></a>00045     {
<a name="l00046"></a>00046         m_hMapHandle = 0;
<a name="l00047"></a>00047         m_sName = sfName;
<a name="l00048"></a>00048         m_pBuffer = NULL;
<a name="l00049"></a>00049         m_nSize = -1;
<a name="l00050"></a>00050         
<a name="l00051"></a>00051 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>        <span class="comment">//Windows land</span>
<a name="l00053"></a>00053         m_hFileHandle = CreateFile(m_sName.c_str(),
<a name="l00054"></a>00054                                        GENERIC_READ, 
<a name="l00055"></a>00055                                        FILE_SHARE_READ,
<a name="l00056"></a>00056                                        NULL,
<a name="l00057"></a>00057                                        OPEN_EXISTING,
<a name="l00058"></a>00058                                        FILE_ATTRIBUTE_NORMAL,
<a name="l00059"></a>00059                                        NULL);
<a name="l00060"></a>00060         
<a name="l00061"></a>00061         <span class="keywordflow">if</span> (m_hFileHandle!=INVALID_HANDLE_VALUE)
<a name="l00062"></a>00062         {
<a name="l00063"></a>00063             m_hMapHandle = CreateFileMapping(m_hFileHandle, NULL, PAGE_READONLY, 0,0, NULL);
<a name="l00064"></a>00064             <span class="keywordflow">if</span> (m_hMapHandle != NULL)
<a name="l00065"></a>00065             {
<a name="l00066"></a>00066                 m_pBuffer = (<span class="keywordtype">char</span>*)MapViewOfFile(m_hMapHandle, FILE_MAP_READ, 0, 0, 0);
<a name="l00067"></a>00067             }
<a name="l00068"></a>00068         }
<a name="l00069"></a>00069         <span class="keywordflow">else</span> 
<a name="l00070"></a>00070         {
<a name="l00071"></a>00071             
<a name="l00072"></a>00072             PrintLastWin32Error();
<a name="l00073"></a>00073             
<a name="l00074"></a>00074             m_hFileHandle = NULL;
<a name="l00075"></a>00075             m_hMapHandle = NULL;
<a name="l00076"></a>00076         }
<a name="l00077"></a>00077 <span class="preprocessor">#else</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span>        <span class="comment">//linux side..</span>
<a name="l00079"></a>00079         m_hMapHandle = open(m_sName.c_str(), O_RDWR, 0);
<a name="l00080"></a>00080         <span class="keywordflow">if</span> (m_hMapHandle != -1)
<a name="l00081"></a>00081         {
<a name="l00082"></a>00082             <span class="comment">//get file stats</span>
<a name="l00083"></a>00083             <span class="keyword">struct </span>stat StatusBuffer;
<a name="l00084"></a>00084             fstat(m_hMapHandle, &amp;StatusBuffer);     
<a name="l00085"></a>00085             m_pBuffer = (<span class="keywordtype">char</span>*)mmap(NULL,
<a name="l00086"></a>00086                 StatusBuffer.st_size,
<a name="l00087"></a>00087                 PROT_READ,
<a name="l00088"></a>00088                 MAP_SHARED,
<a name="l00089"></a>00089                 m_hMapHandle , 0);
<a name="l00090"></a>00090         }
<a name="l00091"></a>00091         <span class="keywordflow">else</span>
<a name="l00092"></a>00092         {
<a name="l00093"></a>00093             m_hMapHandle = 0;
<a name="l00094"></a>00094         }
<a name="l00095"></a>00095 <span class="preprocessor">#endif </span>
<a name="l00096"></a>00096 <span class="preprocessor"></span>        
<a name="l00097"></a>00097         m_nSize = GetSize();
<a name="l00098"></a>00098         
<a name="l00099"></a>00099         <span class="comment">//report out success</span>
<a name="l00100"></a>00100         <span class="keywordflow">if</span>(IsOpen())
<a name="l00101"></a>00101         {
<a name="l00102"></a>00102             std::cout&lt;&lt;<span class="stringliteral">"Successfully Memory Mapped "</span>&lt;&lt;double(m_nSize)/(1048576)&lt;&lt;<span class="stringliteral">"MB file \n"</span>;
<a name="l00103"></a>00103             <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00104"></a>00104         }
<a name="l00105"></a>00105         <span class="keywordflow">else</span>
<a name="l00106"></a>00106         {
<a name="l00107"></a>00107             <span class="keywordflow">return</span> MOOSFail(<span class="stringliteral">"CATASTROPHE : Failed to open file %s"</span>,sfName.c_str());
<a name="l00108"></a>00108         }
<a name="l00109"></a>00109         
<a name="l00110"></a>00110     }
<a name="l00111"></a>00111     
<a name="l00112"></a>00112     ~CMOOSMemMappedFile()
<a name="l00113"></a>00113     {
<a name="l00114"></a>00114         Close();
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116     
<a name="l00117"></a>00117     
<a name="l00118"></a>00118     <span class="comment">//helper function to print WIN32</span>
<a name="l00119"></a>00119     <span class="keywordtype">void</span> PrintLastWin32Error()
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span>        LPVOID lpMsgBuf;
<a name="l00123"></a>00123         FormatMessage( 
<a name="l00124"></a>00124             FORMAT_MESSAGE_ALLOCATE_BUFFER | 
<a name="l00125"></a>00125             FORMAT_MESSAGE_FROM_SYSTEM | 
<a name="l00126"></a>00126             FORMAT_MESSAGE_IGNORE_INSERTS,
<a name="l00127"></a>00127             NULL,
<a name="l00128"></a>00128             GetLastError(),
<a name="l00129"></a>00129             MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), <span class="comment">// Default language</span>
<a name="l00130"></a>00130             (LPTSTR) &amp;lpMsgBuf,
<a name="l00131"></a>00131             0,
<a name="l00132"></a>00132             NULL 
<a name="l00133"></a>00133             );
<a name="l00134"></a>00134         
<a name="l00135"></a>00135         std::string s((LPCTSTR)lpMsgBuf);        
<a name="l00136"></a>00136         <a class="code" href="MOOSGenLibGlobalHelper_8h.html#433edb220f29b9962235c1c246e0d993">MOOSTrace</a>(<span class="stringliteral">"Problem : %s\n"</span>,s.c_str());
<a name="l00137"></a>00137         LocalFree( lpMsgBuf );
<a name="l00138"></a>00138 <span class="preprocessor">#endif</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span>    }
<a name="l00140"></a>00140     
<a name="l00141"></a>00141     <span class="keywordtype">void</span> Close()
<a name="l00142"></a>00142     {
<a name="l00143"></a>00143         <span class="keywordflow">if</span> (m_hMapHandle)
<a name="l00144"></a>00144         {
<a name="l00145"></a>00145 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00146"></a>00146 <span class="preprocessor"></span>            UnmapViewOfFile(m_pBuffer);
<a name="l00147"></a>00147             CloseHandle(m_hMapHandle);
<a name="l00148"></a>00148             CloseHandle(m_hFileHandle);
<a name="l00149"></a>00149             m_hFileHandle = 0;
<a name="l00150"></a>00150             
<a name="l00151"></a>00151 <span class="preprocessor">#else</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span>            munmap(m_pBuffer, 0);
<a name="l00153"></a>00153             close(m_hMapHandle);
<a name="l00154"></a>00154 <span class="preprocessor">#endif </span>
<a name="l00155"></a>00155 <span class="preprocessor"></span>            m_hMapHandle = 0;
<a name="l00156"></a>00156             m_pBuffer = 0;
<a name="l00157"></a>00157         }   
<a name="l00158"></a>00158     }
<a name="l00159"></a>00159     
<a name="l00161"></a>00161     <span class="keywordtype">int</span> GetSize()
<a name="l00162"></a>00162     {
<a name="l00163"></a>00163         <span class="keywordflow">if</span>(!IsOpen())
<a name="l00164"></a>00164             <span class="keywordflow">return</span> 0;
<a name="l00165"></a>00165         
<a name="l00166"></a>00166         <span class="keywordflow">if</span>(m_nSize&lt;0)
<a name="l00167"></a>00167         {
<a name="l00168"></a>00168 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00169"></a>00169 <span class="preprocessor"></span>            m_nSize =  (int)GetFileSize(m_hFileHandle,NULL);
<a name="l00170"></a>00170 <span class="preprocessor">#else</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>            <span class="keyword">struct </span>stat sbuf;
<a name="l00172"></a>00172             fstat(m_hMapHandle, &amp;sbuf);     
<a name="l00173"></a>00173             m_nSize = sbuf.st_size;
<a name="l00174"></a>00174 <span class="preprocessor">#endif</span>
<a name="l00175"></a>00175 <span class="preprocessor"></span>        }
<a name="l00176"></a>00176         <span class="keywordflow">return</span> m_nSize;
<a name="l00177"></a>00177     }
<a name="l00178"></a>00178     
<a name="l00180"></a>00180     <span class="keywordtype">char</span> * operator[](<span class="keywordtype">int</span> i)
<a name="l00181"></a>00181     {
<a name="l00182"></a>00182         <span class="keywordflow">if</span>(i&lt;GetSize())
<a name="l00183"></a>00183             <span class="keywordflow">return</span> (GetContents()+i);
<a name="l00184"></a>00184         <span class="keywordflow">else</span>
<a name="l00185"></a>00185             <span class="keywordflow">return</span> NULL;
<a name="l00186"></a>00186     }
<a name="l00187"></a>00187     
<a name="l00188"></a>00188     
<a name="l00190"></a>00190     <span class="keywordtype">bool</span> IsOpen()
<a name="l00191"></a>00191     {
<a name="l00192"></a>00192         <span class="keywordflow">return</span> m_hMapHandle!=0 &amp;&amp; GetContents()!=NULL;
<a name="l00193"></a>00193     }
<a name="l00194"></a>00194     
<a name="l00196"></a>00196     <span class="keywordtype">char</span>* GetContents()
<a name="l00197"></a>00197     {
<a name="l00198"></a>00198         <span class="keywordflow">return</span> m_pBuffer;
<a name="l00199"></a>00199     }
<a name="l00200"></a>00200     
<a name="l00201"></a>00201  <span class="keyword">private</span>:
<a name="l00202"></a>00202      
<a name="l00203"></a>00203      
<a name="l00204"></a>00204 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span>     HANDLE m_hMapHandle;
<a name="l00206"></a>00206      HANDLE m_hFileHandle;
<a name="l00207"></a>00207 <span class="preprocessor">#else</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span>     <span class="keywordtype">int</span> m_hMapHandle;
<a name="l00209"></a>00209 <span class="preprocessor">#endif </span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>     
<a name="l00211"></a>00211      std::string m_sName;
<a name="l00212"></a>00212      <span class="keywordtype">char</span>* m_pBuffer;
<a name="l00213"></a>00213      <span class="keywordtype">int</span> m_nSize;
<a name="l00214"></a>00214      
<a name="l00215"></a>00215 };
<a name="l00216"></a>00216 
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 
<a name="l00220"></a><a class="code" href="structTextLineInfo.html">00220</a> <span class="keyword">struct </span><a class="code" href="structTextLineInfo.html">TextLineInfo</a>
<a name="l00221"></a>00221 {
<a name="l00222"></a>00222     <a class="code" href="structTextLineInfo.html">TextLineInfo</a>(){pLineStart=NULL;pLineEnd = NULL;};
<a name="l00223"></a>00223     <a class="code" href="structTextLineInfo.html">TextLineInfo</a>(<span class="keywordtype">char</span> * pStart,<span class="keywordtype">char</span> * pEnd)
<a name="l00224"></a>00224     {
<a name="l00225"></a>00225         pLineStart = pStart;
<a name="l00226"></a>00226         pLineEnd = pEnd;
<a name="l00227"></a>00227     }
<a name="l00228"></a>00228     <span class="keywordtype">char</span> * Start(){<span class="keywordflow">return</span> pLineStart;};
<a name="l00229"></a>00229     <span class="keywordtype">char</span> * End(){<span class="keywordflow">return</span> pLineEnd;};
<a name="l00230"></a>00230     <span class="keywordtype">bool</span> IsWanted(){<span class="keywordflow">return</span> <span class="keyword">true</span>;};
<a name="l00231"></a>00231     
<a name="l00232"></a>00232     <span class="keywordtype">char</span> * pLineStart;
<a name="l00233"></a>00233     <span class="keywordtype">char</span> * pLineEnd;
<a name="l00234"></a>00234 };
<a name="l00235"></a>00235 
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 
<a name="l00251"></a>00251 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T = TextLineInfo &gt;
<a name="l00252"></a><a class="code" href="classCMOOSMemMappedTextFile.html">00252</a> <span class="keyword">class </span><a class="code" href="classCMOOSMemMappedTextFile.html">CMOOSMemMappedTextFile</a> : <span class="keyword">public</span> CMOOSMemMappedFile
<a name="l00253"></a>00253 {
<a name="l00254"></a>00254 <span class="keyword">private</span>:
<a name="l00255"></a>00255     <span class="keyword">typedef</span> CMOOSMemMappedFile BASE;
<a name="l00256"></a>00256 <span class="keyword">public</span>:
<a name="l00257"></a>00257     
<a name="l00259"></a><a class="code" href="classCMOOSMemMappedTextFile.html#5a0f3e92f37a1031b75a86169b72fe49">00259</a>     <span class="keyword">typedef</span> T <a class="code" href="classCMOOSMemMappedTextFile.html#5a0f3e92f37a1031b75a86169b72fe49">LINE</a>;
<a name="l00260"></a>00260     
<a name="l00262"></a><a class="code" href="classCMOOSMemMappedTextFile.html#8a7776d99d14e6eac10d5b44a366ffc8">00262</a>     <a class="code" href="classCMOOSMemMappedTextFile.html#8a7776d99d14e6eac10d5b44a366ffc8">CMOOSMemMappedTextFile</a>(){<a class="code" href="classCMOOSMemMappedTextFile.html#2c369e79e54e0fa738aab430f91cb3f9">m_nLineCount</a> = -1;};
<a name="l00263"></a>00263     
<a name="l00264"></a>00264     <span class="keywordtype">bool</span> Open(<span class="keyword">const</span> std::string &amp; sName,<span class="keywordtype">int</span> nMaxLines=-1)
<a name="l00265"></a>00265     {
<a name="l00266"></a>00266         <span class="keywordflow">if</span>(!BASE::Open(sName))
<a name="l00267"></a>00267             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00268"></a>00268         
<a name="l00269"></a>00269         <span class="keywordflow">if</span>(nMaxLines&lt;0)
<a name="l00270"></a>00270             <a class="code" href="classCMOOSMemMappedTextFile.html#2c369e79e54e0fa738aab430f91cb3f9">m_nLineCount</a> = <a class="code" href="classCMOOSMemMappedTextFile.html#f229bfefb0c0021502bbf90b194aa7bb">GetLineCount</a>();
<a name="l00271"></a>00271         <span class="keywordflow">else</span>
<a name="l00272"></a>00272             <a class="code" href="classCMOOSMemMappedTextFile.html#2c369e79e54e0fa738aab430f91cb3f9">m_nLineCount</a> = nMaxLines;
<a name="l00273"></a>00273 
<a name="l00274"></a>00274         <a class="code" href="classCMOOSMemMappedTextFile.html#1bb530677ccc696c9fa881e9fd60b34d">BuildLineIndex</a>(nMaxLines);
<a name="l00275"></a>00275         
<a name="l00276"></a>00276         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00277"></a>00277     }
<a name="l00278"></a>00278     
<a name="l00280"></a><a class="code" href="classCMOOSMemMappedTextFile.html#f229bfefb0c0021502bbf90b194aa7bb">00280</a>     <span class="keywordtype">int</span> <a class="code" href="classCMOOSMemMappedTextFile.html#f229bfefb0c0021502bbf90b194aa7bb">GetLineCount</a>()
<a name="l00281"></a>00281     {
<a name="l00282"></a>00282         <span class="keywordflow">if</span>(IsOpen())
<a name="l00283"></a>00283         {
<a name="l00284"></a>00284             <span class="keywordflow">if</span>(<a class="code" href="classCMOOSMemMappedTextFile.html#2c369e79e54e0fa738aab430f91cb3f9">m_nLineCount</a>&lt;0)
<a name="l00285"></a>00285             {
<a name="l00286"></a>00286                 <span class="comment">//counting lines - </span>
<a name="l00287"></a>00287                 std::cout&lt;&lt;<span class="stringliteral">"Counting Lines...."</span>;
<a name="l00288"></a>00288                 <span class="keywordtype">int</span> nc = std::count(GetContents(),GetContents()+GetSize(),<span class="charliteral">'\n'</span>);
<a name="l00289"></a>00289                 std::cout&lt;&lt;<span class="stringliteral">"done ("</span>&lt;&lt;nc&lt;&lt;<span class="stringliteral">")\n"</span>;
<a name="l00290"></a>00290                 <span class="keywordflow">return</span> nc;
<a name="l00291"></a>00291             }
<a name="l00292"></a>00292             <span class="keywordflow">else</span>
<a name="l00293"></a>00293             {
<a name="l00294"></a>00294                 <span class="keywordflow">return</span> <a class="code" href="classCMOOSMemMappedTextFile.html#2c369e79e54e0fa738aab430f91cb3f9">m_nLineCount</a>;
<a name="l00295"></a>00295             }
<a name="l00296"></a>00296         }
<a name="l00297"></a>00297         <span class="keywordflow">return</span> 0;
<a name="l00298"></a>00298     }
<a name="l00299"></a>00299     
<a name="l00301"></a><a class="code" href="classCMOOSMemMappedTextFile.html#1bb530677ccc696c9fa881e9fd60b34d">00301</a>     <span class="keywordtype">bool</span> <a class="code" href="classCMOOSMemMappedTextFile.html#1bb530677ccc696c9fa881e9fd60b34d">BuildLineIndex</a>(<span class="keywordtype">int</span> nNumLines = -1)
<a name="l00302"></a>00302     {
<a name="l00303"></a>00303         std::cout&lt;&lt;<span class="stringliteral">"Indexing lines...."</span>;
<a name="l00304"></a>00304         
<a name="l00305"></a>00305         <span class="keywordflow">if</span>(nNumLines==-1)
<a name="l00306"></a>00306             nNumLines = <a class="code" href="classCMOOSMemMappedTextFile.html#2c369e79e54e0fa738aab430f91cb3f9">m_nLineCount</a>;
<a name="l00307"></a>00307 
<a name="l00308"></a>00308         <a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.resize(nNumLines);
<a name="l00309"></a>00309         
<a name="l00310"></a>00310         <span class="keywordtype">char</span> * pNewLine = GetContents();
<a name="l00311"></a>00311         <span class="keywordtype">char</span> *pFileEnd = pNewLine+GetSize();
<a name="l00312"></a>00312         <span class="keywordtype">int</span> n = 0;
<a name="l00313"></a>00313         <span class="keywordflow">while</span>(pNewLine&lt;pFileEnd &amp;&amp; n&lt;nNumLines)
<a name="l00314"></a>00314         {
<a name="l00315"></a>00315             <span class="keywordtype">char</span> * pLineEnd = std::find(pNewLine,pFileEnd,<span class="charliteral">'\n'</span>);
<a name="l00316"></a>00316             <span class="keywordflow">if</span>(pLineEnd&lt;pFileEnd)
<a name="l00317"></a>00317             {
<a name="l00318"></a>00318                 <span class="comment">//this is where specialised constructors for the non default</span>
<a name="l00319"></a>00319                 <span class="comment">//line type template may get called...</span>
<a name="l00320"></a>00320                 <a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>[n] = <a class="code" href="classCMOOSMemMappedTextFile.html#5a0f3e92f37a1031b75a86169b72fe49">LINE</a>(pNewLine,pLineEnd);
<a name="l00321"></a>00321                 
<a name="l00322"></a>00322                 <span class="keywordflow">if</span>(<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>[n].IsWanted())
<a name="l00323"></a>00323                     n++;
<a name="l00324"></a>00324             }
<a name="l00325"></a>00325             pNewLine = pLineEnd+1;
<a name="l00326"></a>00326         }
<a name="l00327"></a>00327         
<a name="l00328"></a>00328         std::cout&lt;&lt;<span class="stringliteral">"done\n"</span>;
<a name="l00329"></a>00329         
<a name="l00330"></a>00330         <span class="comment">//we may have discounted some lines...</span>
<a name="l00331"></a>00331         std::cout&lt;&lt;<span class="stringliteral">"Pruning "</span>&lt;&lt;std::distance(<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.begin()+n,<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.end())&lt;&lt;<span class="stringliteral">" elements from LineIndex (comments)\n"</span>;
<a name="l00332"></a>00332         <a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.erase(<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.begin()+n,<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.end());
<a name="l00333"></a>00333         
<a name="l00334"></a>00334         <span class="comment">//re measure the number of lines</span>
<a name="l00335"></a>00335         <a class="code" href="classCMOOSMemMappedTextFile.html#2c369e79e54e0fa738aab430f91cb3f9">m_nLineCount</a> = <a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.size();
<a name="l00336"></a>00336         
<a name="l00337"></a>00337         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00338"></a>00338     }
<a name="l00339"></a>00339     
<a name="l00341"></a><a class="code" href="classCMOOSMemMappedTextFile.html#0de2b5f81e70962391add4ce974c88d8">00341</a>     std::string <a class="code" href="classCMOOSMemMappedTextFile.html#0de2b5f81e70962391add4ce974c88d8">GetLine</a>(<span class="keywordtype">int</span> nLine)
<a name="l00342"></a>00342     {
<a name="l00343"></a>00343         <span class="comment">//note templated type nmust support Start() and End()</span>
<a name="l00344"></a>00344         <span class="keywordflow">if</span>(nLine&lt;static_cast&lt;int&gt;(<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.size()))
<a name="l00345"></a>00345             <span class="keywordflow">return</span> std::string(<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>[nLine].Start(),<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>[nLine].End());
<a name="l00346"></a>00346         <span class="keywordflow">else</span>
<a name="l00347"></a>00347         {
<a name="l00348"></a>00348             std::cerr&lt;&lt;<span class="stringliteral">"OUCH - indexing past end of file index!\n"</span>;
<a name="l00349"></a>00349             <span class="keywordflow">return</span> <span class="stringliteral">""</span>;
<a name="l00350"></a>00350         }
<a name="l00351"></a>00351     }
<a name="l00352"></a>00352     
<a name="l00354"></a><a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">00354</a>     std::vector&lt; LINE &gt; <a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>;
<a name="l00355"></a>00355     
<a name="l00357"></a><a class="code" href="classCMOOSMemMappedTextFile.html#2c369e79e54e0fa738aab430f91cb3f9">00357</a>     <span class="keywordtype">int</span> <a class="code" href="classCMOOSMemMappedTextFile.html#2c369e79e54e0fa738aab430f91cb3f9">m_nLineCount</a>;
<a name="l00358"></a>00358 };
<a name="l00359"></a>00359 
<a name="l00360"></a>00360 
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 
<a name="l00363"></a>00363 
<a name="l00364"></a>00364 
<a name="l00365"></a>00365 <span class="keyword">struct </span>ALogLineInfo : <span class="keyword">public</span> <a class="code" href="structTextLineInfo.html">TextLineInfo</a>
<a name="l00366"></a>00366 {
<a name="l00367"></a>00367     ALogLineInfo(){};
<a name="l00368"></a>00368     ALogLineInfo(<span class="keywordtype">char</span> * pStart,<span class="keywordtype">char</span> * pEnd):<a class="code" href="structTextLineInfo.html">TextLineInfo</a>(pStart,pEnd)
<a name="l00369"></a>00369     {
<a name="l00370"></a>00370         dfTimeField = FastATOF(pStart);
<a name="l00371"></a>00371         <span class="comment">//std::cout&lt;&lt;dfTimeField&lt;&lt;std::endl;</span>
<a name="l00372"></a>00372     }
<a name="l00373"></a>00373     
<a name="l00374"></a>00374     <span class="comment">//returns true if comment</span>
<a name="l00375"></a>00375     <span class="keywordtype">bool</span> IsComment()<span class="keyword"> const</span>
<a name="l00376"></a>00376 <span class="keyword">    </span>{
<a name="l00377"></a>00377         <span class="comment">// alog are well formatted - first char in a line being a %</span>
<a name="l00378"></a>00378         <span class="comment">//indicates a comment</span>
<a name="l00379"></a>00379         <span class="keywordflow">return</span> *pLineStart==<span class="charliteral">'%'</span>;
<a name="l00380"></a>00380     }
<a name="l00381"></a>00381     
<a name="l00382"></a>00382     <span class="keyword">static</span> <span class="keywordtype">bool</span> Printable(<span class="keywordtype">char</span> c)
<a name="l00383"></a>00383     {
<a name="l00384"></a>00384         <span class="keywordflow">return</span> (isalnum(c) != 0);       
<a name="l00385"></a>00385     }
<a name="l00386"></a>00386     
<a name="l00387"></a>00387     
<a name="l00388"></a>00388     <span class="keywordtype">bool</span> IsEmpty()
<a name="l00389"></a>00389     {
<a name="l00390"></a>00390         <span class="comment">//        return std::find_if(pLineStart,pLineEnd,isalnum)==pLineEnd;</span>
<a name="l00391"></a>00391         <span class="keywordflow">return</span> std::find_if(pLineStart,pLineEnd,Printable)==pLineEnd;
<a name="l00392"></a>00392     }
<a name="l00393"></a>00393     
<a name="l00394"></a>00394     <span class="keywordtype">bool</span> IsWanted()
<a name="l00395"></a>00395     {
<a name="l00396"></a>00396         <span class="keywordflow">if</span>(IsComment())
<a name="l00397"></a>00397             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00398"></a>00398         
<a name="l00399"></a>00399         <span class="keywordflow">if</span>(IsEmpty())
<a name="l00400"></a>00400             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00401"></a>00401         
<a name="l00402"></a>00402         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00403"></a>00403     }
<a name="l00404"></a>00404     
<a name="l00405"></a>00405     <span class="keywordtype">double</span> GetTimeField(<span class="keywordtype">double</span> dfOffset=0)<span class="keyword"> const</span>
<a name="l00406"></a>00406 <span class="keyword">    </span>{
<a name="l00407"></a>00407         <span class="keywordflow">return</span> dfTimeField+dfOffset;
<a name="l00408"></a>00408     }
<a name="l00409"></a>00409     
<a name="l00410"></a>00410     <span class="keywordtype">double</span> FastATOF(<span class="keyword">const</span> <span class="keywordtype">char</span> * pStart)
<a name="l00411"></a>00411     {
<a name="l00412"></a>00412         <span class="comment">//quick and dirty  - looks for double in first 20 digits</span>
<a name="l00413"></a>00413         <span class="comment">//beginnin at pStart.</span>
<a name="l00414"></a>00414         <span class="comment">//prevents long call of strlen embedded in atof ..</span>
<a name="l00415"></a>00415 <span class="preprocessor">                #define MAX_DOUBLE_STRING_LENGTH 20</span>
<a name="l00416"></a>00416 <span class="preprocessor"></span>        <span class="keywordtype">char</span> Tmp[MAX_DOUBLE_STRING_LENGTH];
<a name="l00417"></a>00417         std::copy(pStart,pStart+<span class="keyword">sizeof</span>(Tmp),Tmp);
<a name="l00418"></a>00418         Tmp[<span class="keyword">sizeof</span>(Tmp)-1] = 0;
<a name="l00419"></a>00419         
<a name="l00420"></a>00420         <span class="keywordflow">return</span> atof(Tmp);
<a name="l00421"></a>00421         
<a name="l00422"></a>00422     }
<a name="l00423"></a>00423     
<a name="l00424"></a>00424     
<a name="l00425"></a>00425     
<a name="l00426"></a>00426     <span class="keywordtype">double</span> dfTimeField;
<a name="l00427"></a>00427 };
<a name="l00428"></a>00428 
<a name="l00429"></a>00429 
<a name="l00430"></a>00430 <span class="keyword">inline</span> <span class="keywordtype">bool</span> ALogLineInfoLessThan(<span class="keyword">const</span> ALogLineInfo &amp; L1,<span class="keyword">const</span> ALogLineInfo &amp; L2) 
<a name="l00431"></a>00431 {
<a name="l00432"></a>00432 <span class="comment">/*static int nCalls = 0;    </span>
<a name="l00433"></a>00433 <span class="comment">if(nCalls++%10000==0)</span>
<a name="l00434"></a>00434 <span class="comment">    cout&lt;&lt;"nC:"&lt;&lt;nCalls&lt;&lt;std::endl;*/</span>
<a name="l00435"></a>00435     
<a name="l00436"></a>00436     <span class="keywordflow">if</span>(L1.IsComment() &amp;&amp; L2.IsComment())
<a name="l00437"></a>00437         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00438"></a>00438     <span class="keywordflow">if</span>(L1.IsComment())
<a name="l00439"></a>00439         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00440"></a>00440     <span class="keywordflow">if</span>(L2.IsComment())
<a name="l00441"></a>00441         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00442"></a>00442     
<a name="l00443"></a>00443     <span class="comment">//look at first column of times...</span>
<a name="l00444"></a>00444     <span class="keywordflow">return</span> L1.dfTimeField &lt; L2.dfTimeField;        
<a name="l00445"></a>00445 }
<a name="l00446"></a>00446 
<a name="l00450"></a><a class="code" href="classCMOOSMemMappedAlogFile.html">00450</a> <span class="keyword">class </span><a class="code" href="classCMOOSMemMappedAlogFile.html">CMOOSMemMappedAlogFile</a> : <span class="keyword">public</span> <a class="code" href="classCMOOSMemMappedTextFile.html">CMOOSMemMappedTextFile</a>&lt; ALogLineInfo &gt;
<a name="l00451"></a>00451 {
<a name="l00452"></a>00452     
<a name="l00453"></a>00453 <span class="keyword">private</span>:
<a name="l00454"></a>00454     <span class="keyword">typedef</span> CMOOSMemMappedTextFile &lt;ALogLineInfo&gt;  <a class="code" href="classCMOOSMemMappedTextFile.html">BASE</a>;
<a name="l00455"></a>00455 <span class="keyword">public</span>:
<a name="l00456"></a>00456     <a class="code" href="classCMOOSMemMappedAlogFile.html">CMOOSMemMappedAlogFile</a>(){m_dfLogStart = -1;}
<a name="l00457"></a>00457     
<a name="l00458"></a>00458     <span class="keywordtype">bool</span> Open(<span class="keyword">const</span> std::string &amp; sName,<span class="keywordtype">bool</span> bSummary = <span class="keyword">true</span>, <span class="keywordtype">int</span> nMaxLines=-1)
<a name="l00459"></a>00459     {
<a name="l00460"></a>00460         <span class="keywordflow">if</span>(!BASE::Open(sName,nMaxLines))
<a name="l00461"></a>00461             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00462"></a>00462         
<a name="l00463"></a>00463         <span class="keywordflow">if</span>(!SortLineIndex())
<a name="l00464"></a>00464             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00465"></a>00465         
<a name="l00466"></a>00466         <span class="keywordflow">if</span>(bSummary &amp;&amp; !<a class="code" href="classCMOOSMemMappedAlogFile.html#9998379930371663b8b51cc4f3bbd868">ReadSourceAndTypeSets</a>())
<a name="l00467"></a>00467             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00468"></a>00468         
<a name="l00469"></a>00469         <span class="keywordflow">if</span>(!ReadStartTime())
<a name="l00470"></a>00470             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00471"></a>00471         
<a name="l00472"></a>00472         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00473"></a>00473     }
<a name="l00474"></a>00474     
<a name="l00475"></a>00475     <span class="keywordtype">bool</span> SortLineIndex()
<a name="l00476"></a>00476     {
<a name="l00477"></a>00477         std::cout&lt;&lt;<span class="stringliteral">"Sorting Lines...."</span>;
<a name="l00478"></a>00478         std::sort(<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.begin(),<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.end(),ALogLineInfoLessThan);
<a name="l00479"></a>00479         std::cout&lt;&lt;<span class="stringliteral">"done"</span>&lt;&lt;std::endl;
<a name="l00480"></a>00480         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00481"></a>00481     }
<a name="l00482"></a>00482     
<a name="l00483"></a>00483     <span class="keyword">static</span> <span class="keywordtype">bool</span> TimePredicate(<span class="keyword">const</span> <a class="code" href="classCMOOSMemMappedTextFile.html#5a0f3e92f37a1031b75a86169b72fe49">LINE</a> &amp; L, <span class="keywordtype">double</span> dfT)
<a name="l00484"></a>00484     {
<a name="l00485"></a>00485         <span class="keywordflow">return</span> L.GetTimeField()&lt;dfT;
<a name="l00486"></a>00486     }
<a name="l00487"></a>00487     
<a name="l00488"></a>00488         <span class="keyword">static</span> <span class="keywordtype">bool</span> TimePredicate2(<span class="keyword">const</span> <a class="code" href="classCMOOSMemMappedTextFile.html#5a0f3e92f37a1031b75a86169b72fe49">LINE</a> &amp; L, <span class="keyword">const</span> <a class="code" href="classCMOOSMemMappedTextFile.html#5a0f3e92f37a1031b75a86169b72fe49">LINE</a> &amp;  L2)
<a name="l00489"></a>00489     {
<a name="l00490"></a>00490                 <span class="keywordflow">return</span> L.GetTimeField()&lt;L2.GetTimeField();
<a name="l00491"></a>00491     }
<a name="l00492"></a>00492     
<a name="l00493"></a>00493     <span class="keywordtype">int</span> SeekToFindTime(<span class="keywordtype">double</span> dfT)
<a name="l00494"></a>00494     {       
<a name="l00495"></a>00495         std::vector&lt;LINE&gt;::iterator p;
<a name="l00496"></a>00496                 <a class="code" href="classCMOOSMemMappedTextFile.html#5a0f3e92f37a1031b75a86169b72fe49">LINE</a> Q;
<a name="l00497"></a>00497                 Q.dfTimeField = dfT - m_dfLogStart;
<a name="l00498"></a>00498                 <span class="comment">//GCC and VC&lt;8 are OK with this but VC8 is less sure..</span>
<a name="l00499"></a>00499         <span class="comment">//p = std::lower_bound(m_LineIndex.begin(),m_LineIndex.end(),dfT - m_dfLogStart,TimePredicate);</span>
<a name="l00500"></a>00500         p = std::lower_bound(<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.begin(),<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.end(),Q,TimePredicate2);
<a name="l00501"></a>00501         <span class="keywordflow">if</span>(p==<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.end())
<a name="l00502"></a>00502             <span class="keywordflow">return</span> -1;
<a name="l00503"></a>00503         <span class="keywordflow">else</span>
<a name="l00504"></a>00504             <span class="keywordflow">return</span> std::distance(<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>.begin(),p);
<a name="l00505"></a>00505     }
<a name="l00506"></a>00506     
<a name="l00507"></a>00507     <span class="comment">//simply extract a space delimeted token from a string startign at position nPos</span>
<a name="l00508"></a>00508     <span class="keyword">static</span> <span class="keywordtype">bool</span> GetNextToken(<span class="keyword">const</span> std::string &amp; s,<span class="keywordtype">int</span> &amp; nPos,std::string &amp; sTk)
<a name="l00509"></a>00509     {
<a name="l00510"></a>00510         std::string::size_type Start = s.find_first_not_of(<span class="stringliteral">" \t"</span>, nPos);
<a name="l00511"></a>00511         nPos     = s.find_first_of(<span class="stringliteral">" \t"</span>, Start);
<a name="l00512"></a>00512         <span class="keywordflow">if</span>( Start!=std::string::npos)
<a name="l00513"></a>00513         {
<a name="l00514"></a>00514             sTk =s.substr(Start,nPos-Start);
<a name="l00515"></a>00515             <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00516"></a>00516         }
<a name="l00517"></a>00517         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00518"></a>00518     }
<a name="l00519"></a>00519     
<a name="l00522"></a><a class="code" href="classCMOOSMemMappedAlogFile.html#9998379930371663b8b51cc4f3bbd868">00522</a>     <span class="keywordtype">bool</span> <a class="code" href="classCMOOSMemMappedAlogFile.html#9998379930371663b8b51cc4f3bbd868">ReadSourceAndTypeSets</a>()
<a name="l00523"></a>00523     {
<a name="l00524"></a>00524         
<a name="l00525"></a>00525         std::cout&lt;&lt;<span class="stringliteral">"extracting message names and sources....."</span>;
<a name="l00526"></a>00526         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i&lt;<a class="code" href="classCMOOSMemMappedTextFile.html#2c369e79e54e0fa738aab430f91cb3f9">m_nLineCount</a>;i++)
<a name="l00527"></a>00527         {
<a name="l00528"></a>00528             <span class="keywordflow">if</span>(!<a class="code" href="classCMOOSMemMappedTextFile.html#8979ef3490810f0428c52ae2a4b38b6b">m_LineIndex</a>[i].IsComment())
<a name="l00529"></a>00529             {
<a name="l00530"></a>00530                 std::string sLine = <a class="code" href="classCMOOSMemMappedTextFile.html#0de2b5f81e70962391add4ce974c88d8">GetLine</a>(i);
<a name="l00531"></a>00531                 std::string sT,sWhat,sWho;
<a name="l00532"></a>00532                 <span class="keywordtype">int</span> n= 0;
<a name="l00533"></a>00533                 
<a name="l00534"></a>00534                 <span class="comment">//time</span>
<a name="l00535"></a>00535                 GetNextToken(sLine,n,sT);
<a name="l00536"></a>00536                 
<a name="l00537"></a>00537                 <span class="comment">//what</span>
<a name="l00538"></a>00538                 GetNextToken(sLine,n,sWhat);
<a name="l00539"></a>00539                 m_MessageNames.insert(sWhat);
<a name="l00540"></a>00540                 
<a name="l00541"></a>00541                 <span class="comment">//who</span>
<a name="l00542"></a>00542                 GetNextToken(sLine,n,sWho);
<a name="l00543"></a>00543                 m_SourceNames.insert(sWho);
<a name="l00544"></a>00544                 
<a name="l00545"></a>00545             }
<a name="l00546"></a>00546         }
<a name="l00547"></a>00547         std::cout&lt;&lt;<span class="stringliteral">"done\n"</span>;
<a name="l00548"></a>00548         
<a name="l00549"></a>00549         <span class="comment">//print out some warm fuzzies</span>
<a name="l00550"></a>00550         std::cout&lt;&lt;<span class="stringliteral">"\nThere are "</span>&lt;&lt;m_MessageNames.size()&lt;&lt;<span class="stringliteral">" different message types:\n\t"</span>;
<a name="l00551"></a>00551         std::copy(m_MessageNames.begin(),
<a name="l00552"></a>00552             m_MessageNames.end(),
<a name="l00553"></a>00553             std::ostream_iterator&lt;std::string&gt;(std::cout ,<span class="stringliteral">"\n\t"</span>));
<a name="l00554"></a>00554         
<a name="l00555"></a>00555         std::cout&lt;&lt;<span class="stringliteral">"\nThere are "</span>&lt;&lt;m_SourceNames.size()&lt;&lt;<span class="stringliteral">" different sources:\n\t"</span>;
<a name="l00556"></a>00556         std::copy(m_SourceNames.begin(),
<a name="l00557"></a>00557             m_SourceNames.end(),
<a name="l00558"></a>00558             std::ostream_iterator&lt;std::string&gt;(std::cout ,<span class="stringliteral">"\n\t"</span>));
<a name="l00559"></a>00559         
<a name="l00560"></a>00560         
<a name="l00561"></a>00561         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00562"></a>00562     }
<a name="l00563"></a>00563     
<a name="l00564"></a>00564     <span class="comment">//simply fills in the log fills start time</span>
<a name="l00565"></a>00565     <span class="keywordtype">bool</span> ReadStartTime()
<a name="l00566"></a>00566     {
<a name="l00567"></a>00567         <span class="keywordtype">int</span> nHeaderBlock = 1000;
<a name="l00568"></a>00568         std::string sHeader(GetContents(),GetContents()+nHeaderBlock);
<a name="l00569"></a>00569         MOOSChomp(sHeader,<span class="stringliteral">"LOGSTART"</span>);
<a name="l00570"></a>00570         m_dfLogStart = atof(sHeader.c_str());
<a name="l00571"></a>00571         
<a name="l00572"></a>00572         <span class="comment">//this is unix time so it must be gtz</span>
<a name="l00573"></a>00573         <span class="keywordflow">return</span> m_dfLogStart&gt;0;
<a name="l00574"></a>00574     }
<a name="l00575"></a>00575     
<a name="l00576"></a>00576     <span class="keywordtype">double</span> GetLogStart(){<span class="keywordflow">return</span> m_dfLogStart;};
<a name="l00577"></a>00577     
<a name="l00578"></a>00578     <span class="keywordtype">double</span> GetEntryTime(<span class="keywordtype">int</span> i)
<a name="l00579"></a>00579                 {
<a name="l00580"></a>00580                         <span class="keywordflow">if</span>(i&gt;=static_cast&lt;int&gt; (m_LineIndex.size()))
<a name="l00581"></a>00581                                 <span class="keywordflow">return</span> -1;
<a name="l00582"></a>00582 
<a name="l00583"></a>00583                         <span class="comment">//return the time of the ith index offset by the </span>
<a name="l00584"></a>00584                         <span class="comment">//start time of the whoel log</span>
<a name="l00585"></a>00585                         <span class="keywordflow">return</span> m_LineIndex[i].GetTimeField(GetLogStart());
<a name="l00586"></a>00586                 }
<a name="l00587"></a>00587 
<a name="l00588"></a>00588     std::set&lt;std::string&gt; GetSourceNames(){<span class="keywordflow">return</span> m_SourceNames;};
<a name="l00589"></a>00589     std::set&lt;std::string&gt; GetMessageNames(){<span class="keywordflow">return</span> m_MessageNames;};
<a name="l00590"></a>00590     
<a name="l00591"></a>00591     std::set&lt;std::string&gt; m_MessageNames;
<a name="l00592"></a>00592     std::set&lt;std::string&gt; m_SourceNames;
<a name="l00593"></a>00593     <span class="keywordtype">double</span> m_dfLogStart;
<a name="l00594"></a>00594     
<a name="l00595"></a>00595 };
<a name="l00596"></a>00596 
<a name="l00597"></a>00597 
<a name="l00598"></a>00598 
<a name="l00599"></a>00599 <span class="preprocessor">#endif</span>
<a name="l00600"></a>00600 <span class="preprocessor"></span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue Mar 13 10:23:13 2007 for MOOSGenLib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
