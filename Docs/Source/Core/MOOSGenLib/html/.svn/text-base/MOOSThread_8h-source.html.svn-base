<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="center">
  <p><img src="moose7.gif" width="105" height="84"> </p>
  <p><font size="+1" face="Arial, Helvetica, sans-serif">MOOS</font></p>
</div>
</body>
</html>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>/home/pnewman/code/MOOS/trunk/Core/MOOSGenLib/MOOSThread.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">//   MOOS - Mission Oriented Operating Suite </span>
<a name="l00004"></a>00004 <span class="comment">//  </span>
<a name="l00005"></a>00005 <span class="comment">//   A suit of Applications and Libraries for Mobile Robotics Research </span>
<a name="l00006"></a>00006 <span class="comment">//   Copyright (C) 2001-2005 Massachusetts Institute of Technology and </span>
<a name="l00007"></a>00007 <span class="comment">//   Oxford University. </span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">//   This software was written by Paul Newman at MIT 2001-2002 and Oxford </span>
<a name="l00010"></a>00010 <span class="comment">//   University 2003-2005. email: pnewman@robots.ox.ac.uk. </span>
<a name="l00011"></a>00011 <span class="comment">//  </span>
<a name="l00012"></a>00012 <span class="comment">//   This file is part of a  MOOS Core Component. </span>
<a name="l00013"></a>00013 <span class="comment">//</span>
<a name="l00014"></a>00014 <span class="comment">//   This program is free software; you can redistribute it and/or </span>
<a name="l00015"></a>00015 <span class="comment">//   modify it under the terms of the GNU General Public License as </span>
<a name="l00016"></a>00016 <span class="comment">//   published by the Free Software Foundation; either version 2 of the </span>
<a name="l00017"></a>00017 <span class="comment">//   License, or (at your option) any later version. </span>
<a name="l00018"></a>00018 <span class="comment">//  </span>
<a name="l00019"></a>00019 <span class="comment">//   This program is distributed in the hope that it will be useful, </span>
<a name="l00020"></a>00020 <span class="comment">//   but WITHOUT ANY WARRANTY; without even the implied warranty of </span>
<a name="l00021"></a>00021 <span class="comment">//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU </span>
<a name="l00022"></a>00022 <span class="comment">//   General Public License for more details. </span>
<a name="l00023"></a>00023 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment">//   You should have received a copy of the GNU General Public License </span>
<a name="l00025"></a>00025 <span class="comment">//   along with this program; if not, write to the Free Software </span>
<a name="l00026"></a>00026 <span class="comment">//   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA </span>
<a name="l00027"></a>00027 <span class="comment">//   02111-1307, USA. </span>
<a name="l00028"></a>00028 <span class="comment">//</span>
<a name="l00030"></a>00030 <span class="comment"></span>
<a name="l00031"></a>00031 <span class="preprocessor">#ifndef MOOSThreadh</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#define MOOSThreadh</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;MOOSGenLib/MOOSLock.h&gt;</span>
<a name="l00035"></a>00035 
<a name="l00037"></a><a class="code" href="classCMOOSThread.html">00037</a> <span class="keyword">class </span><a class="code" href="classCMOOSThread.html">CMOOSThread</a>
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039 <span class="keyword">private</span>:
<a name="l00041"></a>00041     <span class="keyword">typedef</span> bool (*t_pfnWorkerFunc) (<span class="keywordtype">void</span> *pThreadData);
<a name="l00042"></a>00042   
<a name="l00043"></a>00043 <span class="keyword">public</span>:
<a name="l00044"></a>00044     
<a name="l00045"></a>00045     <a class="code" href="classCMOOSThread.html">CMOOSThread</a>()
<a name="l00046"></a>00046     {
<a name="l00047"></a>00047         m_bRunning = <span class="keyword">false</span>;
<a name="l00048"></a>00048         m_bQuitRequested = <span class="keyword">false</span>;
<a name="l00049"></a>00049         m_pfnThreadFunc = NULL;
<a name="l00050"></a>00050         m_pThreadData = NULL;
<a name="l00051"></a>00051         
<a name="l00052"></a>00052 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>        m_hThread = NULL;
<a name="l00054"></a>00054 <span class="preprocessor">#endif</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>        m_nThreadID = 0;
<a name="l00056"></a>00056         
<a name="l00057"></a>00057     }
<a name="l00058"></a>00058     
<a name="l00059"></a>00059     
<a name="l00060"></a>00060     <a class="code" href="classCMOOSThread.html">CMOOSThread</a>(t_pfnWorkerFunc pfnThreadFunc, <span class="keywordtype">void</span> *pThreadData)
<a name="l00061"></a>00061     {
<a name="l00062"></a>00062         m_bRunning = <span class="keyword">false</span>;
<a name="l00063"></a>00063         m_bQuitRequested = <span class="keyword">false</span>;
<a name="l00064"></a>00064         m_pfnThreadFunc = NULL;
<a name="l00065"></a>00065         m_pThreadData = NULL;
<a name="l00066"></a>00066         
<a name="l00067"></a>00067 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span>        m_hThread = NULL;
<a name="l00069"></a>00069 <span class="preprocessor">#endif</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span>        m_nThreadID = 0;
<a name="l00071"></a>00071         
<a name="l00072"></a>00072         Initialise(pfnThreadFunc, pThreadData);
<a name="l00073"></a>00073     }
<a name="l00074"></a>00074     
<a name="l00075"></a>00075 
<a name="l00076"></a>00076     
<a name="l00078"></a><a class="code" href="classCMOOSThread.html#0c8ee5140d7e8bc8a3734bc25cfc71b5">00078</a>     <a class="code" href="classCMOOSThread.html#0c8ee5140d7e8bc8a3734bc25cfc71b5">~CMOOSThread</a>()
<a name="l00079"></a>00079     {
<a name="l00080"></a>00080         Stop();
<a name="l00081"></a>00081     }
<a name="l00082"></a>00082     
<a name="l00083"></a>00083     
<a name="l00084"></a>00084     
<a name="l00085"></a>00085     <span class="keywordtype">bool</span> Initialise(t_pfnWorkerFunc pfnThreadFunc, <span class="keywordtype">void</span> *pThreadData)
<a name="l00086"></a>00086     {
<a name="l00087"></a>00087         m_lock.<a class="code" href="classCMOOSLock.html#fdf741ccb77eabdfb01114102640dae3">Lock</a>();
<a name="l00088"></a>00088         {
<a name="l00089"></a>00089             m_pfnThreadFunc  = pfnThreadFunc;
<a name="l00090"></a>00090             m_pThreadData    = pThreadData;
<a name="l00091"></a>00091             m_bQuitRequested = <span class="keyword">false</span>;
<a name="l00092"></a>00092         }
<a name="l00093"></a>00093         m_lock.<a class="code" href="classCMOOSLock.html#92d80e73c8e592e2790391ce9c5b4818">UnLock</a>();
<a name="l00094"></a>00094         
<a name="l00095"></a>00095         <span class="keywordflow">return</span> (m_pfnThreadFunc != NULL);
<a name="l00096"></a>00096     }
<a name="l00097"></a>00097     
<a name="l00098"></a>00098     
<a name="l00099"></a>00099     
<a name="l00100"></a>00100     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsQuitRequested()
<a name="l00101"></a>00101     {
<a name="l00102"></a>00102         <span class="keywordflow">return</span> GetQuitFlag();
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     
<a name="l00106"></a>00106 
<a name="l00107"></a>00107     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsThreadRunning()
<a name="l00108"></a>00108     {
<a name="l00109"></a>00109         <span class="keywordflow">return</span> GetRunningFlag();
<a name="l00110"></a>00110     }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00115"></a><a class="code" href="classCMOOSThread.html#8064f7aabeba23272bcb2dca68958969">00115</a>     <span class="keywordtype">bool</span> <a class="code" href="classCMOOSThread.html#8064f7aabeba23272bcb2dca68958969">Start</a>()
<a name="l00116"></a>00116     {
<a name="l00117"></a>00117         m_lock.<a class="code" href="classCMOOSLock.html#fdf741ccb77eabdfb01114102640dae3">Lock</a>();
<a name="l00118"></a>00118         {
<a name="l00119"></a>00119             <span class="keywordflow">if</span> (m_bRunning) {
<a name="l00120"></a>00120                 m_lock.<a class="code" href="classCMOOSLock.html#92d80e73c8e592e2790391ce9c5b4818">UnLock</a>();
<a name="l00121"></a>00121                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00122"></a>00122             }
<a name="l00123"></a>00123             
<a name="l00124"></a>00124             m_bRunning       = <span class="keyword">true</span>;
<a name="l00125"></a>00125             m_bQuitRequested = <span class="keyword">false</span>;
<a name="l00126"></a>00126         }
<a name="l00127"></a>00127         m_lock.<a class="code" href="classCMOOSLock.html#92d80e73c8e592e2790391ce9c5b4818">UnLock</a>();
<a name="l00128"></a>00128         
<a name="l00129"></a>00129         
<a name="l00130"></a>00130 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span>        m_hThread = ::CreateThread(NULL,
<a name="l00132"></a>00132             0,
<a name="l00133"></a>00133             CallbackProc,
<a name="l00134"></a>00134             <span class="keyword">this</span>,
<a name="l00135"></a>00135             CREATE_SUSPENDED,
<a name="l00136"></a>00136             &amp;m_nThreadID);
<a name="l00137"></a>00137         ResumeThread(m_hThread);
<a name="l00138"></a>00138 <span class="preprocessor">#else</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span>        <span class="keywordtype">int</span> Status = pthread_create(&amp; m_nThreadID,NULL,CallbackProc,<span class="keyword">this</span>);
<a name="l00140"></a>00140         <span class="keywordflow">if</span>(Status!=0) {
<a name="l00141"></a>00141             SetRunningFlag(<span class="keyword">false</span>);
<a name="l00142"></a>00142             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00143"></a>00143         }
<a name="l00144"></a>00144 <span class="preprocessor">#endif</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span>        
<a name="l00146"></a>00146         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00147"></a>00147     }
<a name="l00148"></a>00148     
<a name="l00149"></a>00149     
<a name="l00150"></a>00150     
<a name="l00151"></a>00151     <span class="comment">// Requests for the running thread to quit, and sleeps until</span>
<a name="l00152"></a>00152     <span class="comment">// it does.</span>
<a name="l00153"></a>00153     <span class="comment">// This method does NOT actively stop the thread, it simply</span>
<a name="l00154"></a>00154     <span class="comment">// makes a request to quit.  This relies on the running</span>
<a name="l00155"></a>00155     <span class="comment">// thread occasionally polling the IsQuitRequested() method</span>
<a name="l00156"></a>00156     <span class="comment">// of this class, to find out whether it needs to stop itself.</span>
<a name="l00157"></a>00157     <span class="keywordtype">bool</span> Stop()
<a name="l00158"></a>00158     {
<a name="l00159"></a>00159         m_lock.<a class="code" href="classCMOOSLock.html#fdf741ccb77eabdfb01114102640dae3">Lock</a>();
<a name="l00160"></a>00160         {
<a name="l00161"></a>00161             <span class="keywordflow">if</span> (!m_bRunning) {
<a name="l00162"></a>00162                 m_lock.<a class="code" href="classCMOOSLock.html#92d80e73c8e592e2790391ce9c5b4818">UnLock</a>();
<a name="l00163"></a>00163                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00164"></a>00164             }
<a name="l00165"></a>00165             m_bQuitRequested = <span class="keyword">true</span>;
<a name="l00166"></a>00166         }
<a name="l00167"></a>00167         m_lock.<a class="code" href="classCMOOSLock.html#92d80e73c8e592e2790391ce9c5b4818">UnLock</a>();
<a name="l00168"></a>00168         
<a name="l00169"></a>00169         <span class="comment">// Now wait for the thread to finish</span>
<a name="l00170"></a>00170 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>        <span class="keywordflow">if</span> (m_hThread) {
<a name="l00172"></a>00172             WaitForSingleObject(m_hThread,INFINITE);
<a name="l00173"></a>00173         }
<a name="l00174"></a>00174 <span class="preprocessor">#else</span>
<a name="l00175"></a>00175 <span class="preprocessor"></span>        <span class="keywordtype">void</span> * Result;
<a name="l00176"></a>00176         pthread_join(m_nThreadID,&amp;Result);
<a name="l00177"></a>00177 <span class="preprocessor">#endif</span>
<a name="l00178"></a>00178 <span class="preprocessor"></span>        
<a name="l00179"></a>00179         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00180"></a>00180     }
<a name="l00181"></a>00181     
<a name="l00182"></a>00182     
<a name="l00183"></a>00183     
<a name="l00184"></a>00184 <span class="keyword">public</span>:
<a name="l00185"></a>00185     
<a name="l00186"></a>00186 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span><span class="preprocessor">#define TCB DWORD WINAPI</span>
<a name="l00188"></a>00188 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00189"></a>00189 <span class="preprocessor"></span><span class="preprocessor">#define TCB void*</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span>    
<a name="l00192"></a>00192     <span class="comment">// This is the callback called by the OS when the thread starts.</span>
<a name="l00193"></a>00193     <span class="comment">// It hands control over to the work method</span>
<a name="l00194"></a>00194     <span class="keyword">static</span> TCB CallbackProc(<span class="keywordtype">void</span> *lpThis)
<a name="l00195"></a>00195     {
<a name="l00196"></a>00196         <a class="code" href="classCMOOSThread.html">CMOOSThread</a>* pMe = static_cast&lt;CMOOSThread*&gt; (lpThis);
<a name="l00197"></a>00197         
<a name="l00198"></a>00198 <span class="preprocessor">#ifndef _WIN32</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span>        pMe-&gt;<a class="code" href="classCMOOSThread.html#9706c59e5f6455eaf1269e494a00bf86">Work</a>();
<a name="l00200"></a>00200 <span class="preprocessor">#else</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>        <span class="keywordflow">return</span> pMe-&gt;<a class="code" href="classCMOOSThread.html#9706c59e5f6455eaf1269e494a00bf86">Work</a>();
<a name="l00202"></a>00202 <span class="preprocessor">#endif</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>        
<a name="l00204"></a>00204     }
<a name="l00205"></a>00205     
<a name="l00206"></a>00206     
<a name="l00207"></a>00207     
<a name="l00208"></a>00208 <span class="keyword">private</span>:
<a name="l00209"></a>00209     
<a name="l00210"></a>00210     <span class="keywordtype">void</span> SetQuitFlag(<span class="keywordtype">bool</span> bState) {
<a name="l00211"></a>00211         m_lock.<a class="code" href="classCMOOSLock.html#fdf741ccb77eabdfb01114102640dae3">Lock</a>();
<a name="l00212"></a>00212         m_bQuitRequested = bState;
<a name="l00213"></a>00213         m_lock.<a class="code" href="classCMOOSLock.html#92d80e73c8e592e2790391ce9c5b4818">UnLock</a>();
<a name="l00214"></a>00214     }
<a name="l00215"></a>00215     
<a name="l00216"></a>00216     <span class="keywordtype">void</span> SetRunningFlag(<span class="keywordtype">bool</span> bState) {
<a name="l00217"></a>00217         m_lock.<a class="code" href="classCMOOSLock.html#fdf741ccb77eabdfb01114102640dae3">Lock</a>();
<a name="l00218"></a>00218         m_bRunning = bState;
<a name="l00219"></a>00219         m_lock.<a class="code" href="classCMOOSLock.html#92d80e73c8e592e2790391ce9c5b4818">UnLock</a>();
<a name="l00220"></a>00220     }
<a name="l00221"></a>00221     
<a name="l00222"></a>00222     <span class="keywordtype">bool</span> GetQuitFlag() {
<a name="l00223"></a>00223         <span class="keywordtype">bool</span> bState = <span class="keyword">false</span>;
<a name="l00224"></a>00224         m_lock.<a class="code" href="classCMOOSLock.html#fdf741ccb77eabdfb01114102640dae3">Lock</a>();
<a name="l00225"></a>00225         bState = m_bQuitRequested;
<a name="l00226"></a>00226         m_lock.<a class="code" href="classCMOOSLock.html#92d80e73c8e592e2790391ce9c5b4818">UnLock</a>();
<a name="l00227"></a>00227         <span class="keywordflow">return</span> bState;
<a name="l00228"></a>00228     }
<a name="l00229"></a>00229     
<a name="l00230"></a>00230     <span class="keywordtype">bool</span> GetRunningFlag() {
<a name="l00231"></a>00231         <span class="keywordtype">bool</span> bState = <span class="keyword">false</span>;
<a name="l00232"></a>00232         m_lock.<a class="code" href="classCMOOSLock.html#fdf741ccb77eabdfb01114102640dae3">Lock</a>();
<a name="l00233"></a>00233         bState = m_bRunning;
<a name="l00234"></a>00234         m_lock.<a class="code" href="classCMOOSLock.html#92d80e73c8e592e2790391ce9c5b4818">UnLock</a>();
<a name="l00235"></a>00235         <span class="keywordflow">return</span> bState;
<a name="l00236"></a>00236     }
<a name="l00237"></a>00237     
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 <span class="keyword">private</span>:
<a name="l00240"></a>00240 
<a name="l00241"></a>00241     <span class="comment">// This is the method that actually fires off the worker</span>
<a name="l00242"></a>00242     <span class="comment">// function in the owner object</span>
<a name="l00243"></a>00243     <span class="keywordtype">bool</span> Work()
<a name="l00244"></a>00244     {
<a name="l00245"></a>00245         <span class="keywordflow">if</span>(m_pfnThreadFunc != NULL)
<a name="l00246"></a>00246         {
<a name="l00247"></a>00247             SetRunningFlag(<span class="keyword">true</span>);
<a name="l00248"></a>00248             <span class="comment">// The next line will block until the thread completes</span>
<a name="l00249"></a>00249             <span class="keywordtype">bool</span> retval = (*m_pfnThreadFunc)(m_pThreadData);
<a name="l00250"></a>00250             SetRunningFlag(<span class="keyword">false</span>);
<a name="l00251"></a>00251             <span class="keywordflow">return</span> retval;
<a name="l00252"></a>00252         }
<a name="l00253"></a>00253         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00254"></a>00254     }
<a name="l00255"></a>00255     
<a name="l00256"></a>00256     
<a name="l00257"></a>00257 <span class="keyword">private</span>:
<a name="l00258"></a>00258     
<a name="l00259"></a>00259     <a class="code" href="classCMOOSLock.html">CMOOSLock</a> m_lock;
<a name="l00260"></a>00260     
<a name="l00261"></a>00261 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00262"></a>00262 <span class="preprocessor"></span>    HANDLE m_hThread;
<a name="l00263"></a>00263 <span class="preprocessor">#endif</span>
<a name="l00264"></a>00264 <span class="preprocessor"></span>
<a name="l00265"></a>00265     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> m_nThreadID;
<a name="l00266"></a>00266     
<a name="l00268"></a>00268     <span class="comment">// These are only accessed through Set/Get</span>
<a name="l00269"></a>00269     <span class="comment">// functions with mutexes</span>
<a name="l00270"></a>00270     <span class="keywordtype">bool</span> m_bRunning;
<a name="l00271"></a>00271     <span class="keywordtype">bool</span> m_bQuitRequested;
<a name="l00273"></a>00273     
<a name="l00274"></a>00274     <span class="comment">// This is where we store the address of the function</span>
<a name="l00275"></a>00275     <span class="comment">// that gets called when the thread fires up</span>
<a name="l00276"></a>00276     t_pfnWorkerFunc m_pfnThreadFunc;
<a name="l00277"></a>00277     
<a name="l00278"></a>00278     <span class="comment">// This is normally used for passing the</span>
<a name="l00279"></a>00279     <span class="comment">// 'this' pointer of the owner class to</span>
<a name="l00280"></a>00280     <span class="comment">// its static worker method. But it</span>
<a name="l00281"></a>00281     <span class="comment">// could also be a pointer to a struct</span>
<a name="l00282"></a>00282     <span class="comment">// containing a load of stuff.  It's up</span>
<a name="l00283"></a>00283     <span class="comment">// to the owner to decide.</span>
<a name="l00284"></a>00284     <span class="keywordtype">void</span> *m_pThreadData;
<a name="l00285"></a>00285     
<a name="l00286"></a>00286 };
<a name="l00287"></a>00287 <span class="preprocessor">#endif</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>
<a name="l00289"></a>00289 
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue Mar 13 10:23:13 2007 for MOOSGenLib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
