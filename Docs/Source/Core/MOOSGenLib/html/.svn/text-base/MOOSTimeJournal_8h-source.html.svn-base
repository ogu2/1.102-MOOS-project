<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="center">
  <p><img src="moose7.gif" width="105" height="84"> </p>
  <p><font size="+1" face="Arial, Helvetica, sans-serif">MOOS</font></p>
</div>
</body>
</html>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>/home/pnewman/code/MOOS/trunk/Core/MOOSGenLib/MOOSTimeJournal.h</h1><a href="MOOSTimeJournal_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">//   MOOS - Mission Oriented Operating Suite </span>
<a name="l00004"></a>00004 <span class="comment">//  </span>
<a name="l00005"></a>00005 <span class="comment">//   A suit of Applications and Libraries for Mobile Robotics Research </span>
<a name="l00006"></a>00006 <span class="comment">//   Copyright (C) 2001-2005 Massachusetts Institute of Technology and </span>
<a name="l00007"></a>00007 <span class="comment">//   Oxford University. </span>
<a name="l00008"></a>00008 <span class="comment">//      </span>
<a name="l00009"></a>00009 <span class="comment">//   This software was written by Paul Newman at MIT 2001-2002 and Oxford </span>
<a name="l00010"></a>00010 <span class="comment">//   University 2003-2005. email: pnewman@robots.ox.ac.uk. </span>
<a name="l00011"></a>00011 <span class="comment">//        </span>
<a name="l00012"></a>00012 <span class="comment">//   This file is part of a  MOOS Core Component. </span>
<a name="l00013"></a>00013 <span class="comment">//              </span>
<a name="l00014"></a>00014 <span class="comment">//   This program is free software; you can redistribute it and/or </span>
<a name="l00015"></a>00015 <span class="comment">//   modify it under the terms of the GNU General Public License as </span>
<a name="l00016"></a>00016 <span class="comment">//   published by the Free Software Foundation; either version 2 of the </span>
<a name="l00017"></a>00017 <span class="comment">//   License, or (at your option) any later version. </span>
<a name="l00018"></a>00018 <span class="comment">//                </span>
<a name="l00019"></a>00019 <span class="comment">//   This program is distributed in the hope that it will be useful, </span>
<a name="l00020"></a>00020 <span class="comment">//   but WITHOUT ANY WARRANTY; without even the implied warranty of </span>
<a name="l00021"></a>00021 <span class="comment">//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU </span>
<a name="l00022"></a>00022 <span class="comment">//   General Public License for more details. </span>
<a name="l00023"></a>00023 <span class="comment">//                      </span>
<a name="l00024"></a>00024 <span class="comment">//   You should have received a copy of the GNU General Public License </span>
<a name="l00025"></a>00025 <span class="comment">//   along with this program; if not, write to the Free Software </span>
<a name="l00026"></a>00026 <span class="comment">//   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA </span>
<a name="l00027"></a>00027 <span class="comment">//   02111-1307, USA. </span>
<a name="l00028"></a>00028 <span class="comment">//</span>
<a name="l00030"></a>00030 <span class="comment"></span>
<a name="l00032"></a>00032 <span class="preprocessor">#ifndef MOOSTimeJournalH</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span><span class="preprocessor">#define MOOSTimeJournalH</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span><span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="comment">//this is a utility class to do time stamping. </span>
<a name="l00039"></a>00039 <span class="comment">//</span>
<a name="l00040"></a>00040 <span class="comment">//Tick("LABEL");</span>
<a name="l00041"></a>00041 <span class="comment">//  DO YOUR CODE</span>
<a name="l00042"></a>00042 <span class="comment">//              TICK("LABEL2")</span>
<a name="l00043"></a>00043 <span class="comment">//                      MORE CODE</span>
<a name="l00044"></a>00044 <span class="comment">//              Tock("LABLE2")</span>
<a name="l00045"></a>00045 <span class="comment">//Tock("LABEL")</span>
<a name="l00046"></a>00046 <span class="comment">//Dump();</span>
<a name="l00047"></a>00047 <span class="comment">//</span>
<a name="l00048"></a>00048 <span class="comment">//this will produce a pretty file of timings</span>
<a name="l00049"></a>00049 <span class="comment">//you can call NewLevel() to print an iteration seperator</span>
<a name="l00050"></a>00050 <span class="comment">//in the dump file. This an exerpt from a dump file</span>
<a name="l00051"></a>00051 <span class="comment">/*Level:4754</span>
<a name="l00052"></a>00052 <span class="comment">        Iterate              0.000 seconds</span>
<a name="l00053"></a>00053 <span class="comment">Level:4755</span>
<a name="l00054"></a>00054 <span class="comment">        Iterate              0.430 seconds</span>
<a name="l00055"></a>00055 <span class="comment">        ConstraintApplication 0.422 seconds</span>
<a name="l00056"></a>00056 <span class="comment">        EKF                  0.012 seconds</span>
<a name="l00057"></a>00057 <span class="comment">        EKF_UPD_1            0.006 seconds</span>
<a name="l00058"></a>00058 <span class="comment">        EKF_OBS              0.006 seconds      </span>
<a name="l00059"></a>00059 <span class="comment">        ConstraintSearch     0.003 seconds</span>
<a name="l00060"></a>00060 <span class="comment">Level:4756</span>
<a name="l00061"></a>00061 <span class="comment">        Iterate              0.041 seconds</span>
<a name="l00062"></a>00062 <span class="comment">Level:4757</span>
<a name="l00063"></a>00063 <span class="comment">        Iterate              0.000 seconds</span>
<a name="l00064"></a>00064 <span class="comment">*/</span>
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 <span class="keyword">class </span>CMOOSTimeJournal
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068 <span class="keyword">public</span>:
<a name="l00069"></a>00069 
<a name="l00070"></a>00070         CMOOSTimeJournal()
<a name="l00071"></a>00071         {               
<a name="l00072"></a>00072                 m_nLevel = 0;
<a name="l00073"></a>00073         m_nStack = 0;
<a name="l00074"></a>00074         }
<a name="l00075"></a>00075 
<a name="l00076"></a>00076         ~CMOOSTimeJournal()
<a name="l00077"></a>00077         {
<a name="l00078"></a>00078                 m_File.close();
<a name="l00079"></a>00079         }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081         <span class="keywordtype">void</span> Open(<span class="keyword">const</span> std::string &amp; sFile)
<a name="l00082"></a>00082         {
<a name="l00083"></a>00083                 m_File.open(sFile.c_str());
<a name="l00084"></a>00084                 m_nLevel = 0;
<a name="l00085"></a>00085         }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087         <span class="keywordtype">void</span> Tick(<span class="keyword">const</span> std::string &amp; S)
<a name="l00088"></a>00088         {
<a name="l00089"></a>00089                 m_T[S] = HPMOOSTime();
<a name="l00090"></a>00090         m_nStack++;
<a name="l00091"></a>00091         }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093         <span class="keywordtype">void</span> Tock(<span class="keyword">const</span> std::string &amp; S)
<a name="l00094"></a>00094         {
<a name="l00095"></a>00095                 <span class="keywordflow">if</span>(m_T.find(S)==m_T.end())
<a name="l00096"></a>00096                 {
<a name="l00097"></a>00097                         <a class="code" href="MOOSGenLibGlobalHelper_8h.html#433edb220f29b9962235c1c246e0d993">MOOSTrace</a>(<span class="stringliteral">"No such timer \"%s\"\n"</span>,S.c_str());
<a name="l00098"></a>00098                         <span class="keywordflow">return</span>;
<a name="l00099"></a>00099                 }
<a name="l00100"></a>00100                 <span class="keywordflow">else</span>
<a name="l00101"></a>00101                 {            
<a name="l00102"></a>00102             std::string space(4*(m_nStack+1),<span class="charliteral">' '</span>);
<a name="l00103"></a>00103                         std::string R= MOOSFormat(<span class="stringliteral">"%s%-40s %.3f seconds"</span>,space.c_str(),S.c_str(),HPMOOSTime()-m_T[S]);
<a name="l00104"></a>00104                         m_L.push_back(R);
<a name="l00105"></a>00105 
<a name="l00106"></a>00106             <span class="keywordflow">if</span>(m_nStack&gt;0)
<a name="l00107"></a>00107                 m_nStack--;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109         }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 
<a name="l00112"></a>00112         }
<a name="l00113"></a>00113 
<a name="l00114"></a>00114         <span class="keywordtype">void</span> NewLevel(<span class="keywordtype">int</span> nL=-1)
<a name="l00115"></a>00115         {
<a name="l00116"></a>00116                 m_nLevel = nL&gt;-1 ? nL:m_nLevel+1;
<a name="l00117"></a>00117         }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         <span class="keywordtype">void</span> Dump()
<a name="l00120"></a>00120         {               
<a name="l00121"></a>00121                 m_File&lt;&lt;<span class="stringliteral">"Level:"</span>&lt;&lt;m_nLevel&lt;&lt;std::endl;
<a name="l00122"></a>00122                 std::copy(m_L.rbegin(),m_L.rend(),std::ostream_iterator&lt;std::string&gt;(m_File,<span class="stringliteral">"\n"</span>));
<a name="l00123"></a>00123                 m_File.flush();
<a name="l00124"></a>00124                 m_L.clear();
<a name="l00125"></a>00125                 m_T.clear();
<a name="l00126"></a>00126         }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="keyword">protected</span>:      
<a name="l00129"></a>00129         std::map&lt;std::string, double&gt; m_T;
<a name="l00130"></a>00130         std::list&lt;std::string&gt; m_L;
<a name="l00131"></a>00131         std::ofstream m_File;
<a name="l00132"></a>00132         <span class="keywordtype">int</span> m_nLevel;
<a name="l00133"></a>00133     <span class="keywordtype">int</span> m_nStack;
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 };
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="preprocessor">#endif</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue Mar 13 10:23:13 2007 for MOOSGenLib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
